// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	InformationPlatformPing(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CodedReply, error)
	InformationPlatformVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CodedReply, error)
	InformationDevicesSummary(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DevicesSummaryReply, error)
	InformationDeviceStatus(ctx context.Context, in *DeviceUniqID, opts ...grpc.CallOption) (*MapBoolReply, error)
	InformationDeviceChannelStatus(ctx context.Context, in *DeviceUniqIDAbdChannelUniqID, opts ...grpc.CallOption) (*MapBoolReply, error)
	InformationDeviceChannelStatistic(ctx context.Context, in *DeviceUniqIDAbdChannelUniqID, opts ...grpc.CallOption) (*MapBoolReply, error)
	InformationDeviceStatistic(ctx context.Context, in *DeviceUniqID, opts ...grpc.CallOption) (*CodedReply, error)
	InformationDeviceSummary(ctx context.Context, in *DeviceUniqID, opts ...grpc.CallOption) (*ConfigurationsDeviceRequest, error)
	InformationPlatformSummary(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CodedReply, error)
	ConfigurationsDeviceAddition(ctx context.Context, in *ConfigurationsDeviceRequest, opts ...grpc.CallOption) (*CodedReply, error)
	ConfigurationsDeviceEditing(ctx context.Context, in *ConfigurationsDeviceRequest, opts ...grpc.CallOption) (*CodedReply, error)
	ConfigurationsDeviceDeletion(ctx context.Context, in *DeviceUniqID, opts ...grpc.CallOption) (*CodedReply, error)
	ConfigurationsDeviceReconnection(ctx context.Context, in *DeviceUniqID, opts ...grpc.CallOption) (*CodedReply, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) InformationPlatformPing(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CodedReply, error) {
	out := new(CodedReply)
	err := c.cc.Invoke(ctx, "/server.Greeter/InformationPlatformPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) InformationPlatformVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CodedReply, error) {
	out := new(CodedReply)
	err := c.cc.Invoke(ctx, "/server.Greeter/InformationPlatformVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) InformationDevicesSummary(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DevicesSummaryReply, error) {
	out := new(DevicesSummaryReply)
	err := c.cc.Invoke(ctx, "/server.Greeter/InformationDevicesSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) InformationDeviceStatus(ctx context.Context, in *DeviceUniqID, opts ...grpc.CallOption) (*MapBoolReply, error) {
	out := new(MapBoolReply)
	err := c.cc.Invoke(ctx, "/server.Greeter/InformationDeviceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) InformationDeviceChannelStatus(ctx context.Context, in *DeviceUniqIDAbdChannelUniqID, opts ...grpc.CallOption) (*MapBoolReply, error) {
	out := new(MapBoolReply)
	err := c.cc.Invoke(ctx, "/server.Greeter/InformationDeviceChannelStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) InformationDeviceChannelStatistic(ctx context.Context, in *DeviceUniqIDAbdChannelUniqID, opts ...grpc.CallOption) (*MapBoolReply, error) {
	out := new(MapBoolReply)
	err := c.cc.Invoke(ctx, "/server.Greeter/InformationDeviceChannelStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) InformationDeviceStatistic(ctx context.Context, in *DeviceUniqID, opts ...grpc.CallOption) (*CodedReply, error) {
	out := new(CodedReply)
	err := c.cc.Invoke(ctx, "/server.Greeter/InformationDeviceStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) InformationDeviceSummary(ctx context.Context, in *DeviceUniqID, opts ...grpc.CallOption) (*ConfigurationsDeviceRequest, error) {
	out := new(ConfigurationsDeviceRequest)
	err := c.cc.Invoke(ctx, "/server.Greeter/InformationDeviceSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) InformationPlatformSummary(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CodedReply, error) {
	out := new(CodedReply)
	err := c.cc.Invoke(ctx, "/server.Greeter/InformationPlatformSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) ConfigurationsDeviceAddition(ctx context.Context, in *ConfigurationsDeviceRequest, opts ...grpc.CallOption) (*CodedReply, error) {
	out := new(CodedReply)
	err := c.cc.Invoke(ctx, "/server.Greeter/ConfigurationsDeviceAddition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) ConfigurationsDeviceEditing(ctx context.Context, in *ConfigurationsDeviceRequest, opts ...grpc.CallOption) (*CodedReply, error) {
	out := new(CodedReply)
	err := c.cc.Invoke(ctx, "/server.Greeter/ConfigurationsDeviceEditing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) ConfigurationsDeviceDeletion(ctx context.Context, in *DeviceUniqID, opts ...grpc.CallOption) (*CodedReply, error) {
	out := new(CodedReply)
	err := c.cc.Invoke(ctx, "/server.Greeter/ConfigurationsDeviceDeletion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) ConfigurationsDeviceReconnection(ctx context.Context, in *DeviceUniqID, opts ...grpc.CallOption) (*CodedReply, error) {
	out := new(CodedReply)
	err := c.cc.Invoke(ctx, "/server.Greeter/ConfigurationsDeviceReconnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	InformationPlatformPing(context.Context, *Empty) (*CodedReply, error)
	InformationPlatformVersion(context.Context, *Empty) (*CodedReply, error)
	InformationDevicesSummary(context.Context, *Empty) (*DevicesSummaryReply, error)
	InformationDeviceStatus(context.Context, *DeviceUniqID) (*MapBoolReply, error)
	InformationDeviceChannelStatus(context.Context, *DeviceUniqIDAbdChannelUniqID) (*MapBoolReply, error)
	InformationDeviceChannelStatistic(context.Context, *DeviceUniqIDAbdChannelUniqID) (*MapBoolReply, error)
	InformationDeviceStatistic(context.Context, *DeviceUniqID) (*CodedReply, error)
	InformationDeviceSummary(context.Context, *DeviceUniqID) (*ConfigurationsDeviceRequest, error)
	InformationPlatformSummary(context.Context, *Empty) (*CodedReply, error)
	ConfigurationsDeviceAddition(context.Context, *ConfigurationsDeviceRequest) (*CodedReply, error)
	ConfigurationsDeviceEditing(context.Context, *ConfigurationsDeviceRequest) (*CodedReply, error)
	ConfigurationsDeviceDeletion(context.Context, *DeviceUniqID) (*CodedReply, error)
	ConfigurationsDeviceReconnection(context.Context, *DeviceUniqID) (*CodedReply, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) InformationPlatformPing(context.Context, *Empty) (*CodedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformationPlatformPing not implemented")
}
func (UnimplementedGreeterServer) InformationPlatformVersion(context.Context, *Empty) (*CodedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformationPlatformVersion not implemented")
}
func (UnimplementedGreeterServer) InformationDevicesSummary(context.Context, *Empty) (*DevicesSummaryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformationDevicesSummary not implemented")
}
func (UnimplementedGreeterServer) InformationDeviceStatus(context.Context, *DeviceUniqID) (*MapBoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformationDeviceStatus not implemented")
}
func (UnimplementedGreeterServer) InformationDeviceChannelStatus(context.Context, *DeviceUniqIDAbdChannelUniqID) (*MapBoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformationDeviceChannelStatus not implemented")
}
func (UnimplementedGreeterServer) InformationDeviceChannelStatistic(context.Context, *DeviceUniqIDAbdChannelUniqID) (*MapBoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformationDeviceChannelStatistic not implemented")
}
func (UnimplementedGreeterServer) InformationDeviceStatistic(context.Context, *DeviceUniqID) (*CodedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformationDeviceStatistic not implemented")
}
func (UnimplementedGreeterServer) InformationDeviceSummary(context.Context, *DeviceUniqID) (*ConfigurationsDeviceRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformationDeviceSummary not implemented")
}
func (UnimplementedGreeterServer) InformationPlatformSummary(context.Context, *Empty) (*CodedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformationPlatformSummary not implemented")
}
func (UnimplementedGreeterServer) ConfigurationsDeviceAddition(context.Context, *ConfigurationsDeviceRequest) (*CodedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigurationsDeviceAddition not implemented")
}
func (UnimplementedGreeterServer) ConfigurationsDeviceEditing(context.Context, *ConfigurationsDeviceRequest) (*CodedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigurationsDeviceEditing not implemented")
}
func (UnimplementedGreeterServer) ConfigurationsDeviceDeletion(context.Context, *DeviceUniqID) (*CodedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigurationsDeviceDeletion not implemented")
}
func (UnimplementedGreeterServer) ConfigurationsDeviceReconnection(context.Context, *DeviceUniqID) (*CodedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigurationsDeviceReconnection not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_InformationPlatformPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).InformationPlatformPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Greeter/InformationPlatformPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).InformationPlatformPing(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_InformationPlatformVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).InformationPlatformVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Greeter/InformationPlatformVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).InformationPlatformVersion(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_InformationDevicesSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).InformationDevicesSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Greeter/InformationDevicesSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).InformationDevicesSummary(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_InformationDeviceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceUniqID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).InformationDeviceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Greeter/InformationDeviceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).InformationDeviceStatus(ctx, req.(*DeviceUniqID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_InformationDeviceChannelStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceUniqIDAbdChannelUniqID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).InformationDeviceChannelStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Greeter/InformationDeviceChannelStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).InformationDeviceChannelStatus(ctx, req.(*DeviceUniqIDAbdChannelUniqID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_InformationDeviceChannelStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceUniqIDAbdChannelUniqID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).InformationDeviceChannelStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Greeter/InformationDeviceChannelStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).InformationDeviceChannelStatistic(ctx, req.(*DeviceUniqIDAbdChannelUniqID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_InformationDeviceStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceUniqID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).InformationDeviceStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Greeter/InformationDeviceStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).InformationDeviceStatistic(ctx, req.(*DeviceUniqID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_InformationDeviceSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceUniqID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).InformationDeviceSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Greeter/InformationDeviceSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).InformationDeviceSummary(ctx, req.(*DeviceUniqID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_InformationPlatformSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).InformationPlatformSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Greeter/InformationPlatformSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).InformationPlatformSummary(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_ConfigurationsDeviceAddition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurationsDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).ConfigurationsDeviceAddition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Greeter/ConfigurationsDeviceAddition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).ConfigurationsDeviceAddition(ctx, req.(*ConfigurationsDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_ConfigurationsDeviceEditing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurationsDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).ConfigurationsDeviceEditing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Greeter/ConfigurationsDeviceEditing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).ConfigurationsDeviceEditing(ctx, req.(*ConfigurationsDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_ConfigurationsDeviceDeletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceUniqID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).ConfigurationsDeviceDeletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Greeter/ConfigurationsDeviceDeletion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).ConfigurationsDeviceDeletion(ctx, req.(*DeviceUniqID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_ConfigurationsDeviceReconnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceUniqID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).ConfigurationsDeviceReconnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Greeter/ConfigurationsDeviceReconnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).ConfigurationsDeviceReconnection(ctx, req.(*DeviceUniqID))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InformationPlatformPing",
			Handler:    _Greeter_InformationPlatformPing_Handler,
		},
		{
			MethodName: "InformationPlatformVersion",
			Handler:    _Greeter_InformationPlatformVersion_Handler,
		},
		{
			MethodName: "InformationDevicesSummary",
			Handler:    _Greeter_InformationDevicesSummary_Handler,
		},
		{
			MethodName: "InformationDeviceStatus",
			Handler:    _Greeter_InformationDeviceStatus_Handler,
		},
		{
			MethodName: "InformationDeviceChannelStatus",
			Handler:    _Greeter_InformationDeviceChannelStatus_Handler,
		},
		{
			MethodName: "InformationDeviceChannelStatistic",
			Handler:    _Greeter_InformationDeviceChannelStatistic_Handler,
		},
		{
			MethodName: "InformationDeviceStatistic",
			Handler:    _Greeter_InformationDeviceStatistic_Handler,
		},
		{
			MethodName: "InformationDeviceSummary",
			Handler:    _Greeter_InformationDeviceSummary_Handler,
		},
		{
			MethodName: "InformationPlatformSummary",
			Handler:    _Greeter_InformationPlatformSummary_Handler,
		},
		{
			MethodName: "ConfigurationsDeviceAddition",
			Handler:    _Greeter_ConfigurationsDeviceAddition_Handler,
		},
		{
			MethodName: "ConfigurationsDeviceEditing",
			Handler:    _Greeter_ConfigurationsDeviceEditing_Handler,
		},
		{
			MethodName: "ConfigurationsDeviceDeletion",
			Handler:    _Greeter_ConfigurationsDeviceDeletion_Handler,
		},
		{
			MethodName: "ConfigurationsDeviceReconnection",
			Handler:    _Greeter_ConfigurationsDeviceReconnection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/server.proto",
}
