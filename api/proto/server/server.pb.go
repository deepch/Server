//tested

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: server/server.proto

package server_proto

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeviceChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string  `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	DataURL     string  `protobuf:"bytes,2,opt,name=DataURL,proto3" json:"DataURL,omitempty"`
	SnapshotURL string  `protobuf:"bytes,3,opt,name=SnapshotURL,proto3" json:"SnapshotURL,omitempty"`
	VOD         bool    `protobuf:"varint,4,opt,name=VOD,proto3" json:"VOD,omitempty"`
	Record      bool    `protobuf:"varint,5,opt,name=Record,proto3" json:"Record,omitempty"`
	RecordTime  uint32  `protobuf:"varint,6,opt,name=RecordTime,proto3" json:"RecordTime,omitempty"`
	Audio       bool    `protobuf:"varint,7,opt,name=Audio,proto3" json:"Audio,omitempty"`
	RTPProxy    bool    `protobuf:"varint,8,opt,name=RTPProxy,proto3" json:"RTPProxy,omitempty"`
	Debug       bool    `protobuf:"varint,9,opt,name=Debug,proto3" json:"Debug,omitempty"`
	DebugRaw    bool    `protobuf:"varint,10,opt,name=DebugRaw,proto3" json:"DebugRaw,omitempty"`
	Status      uint32  `protobuf:"varint,11,opt,name=Status,proto3" json:"Status,omitempty"`
	Bitrate     float32 `protobuf:"fixed32,12,opt,name=Bitrate,proto3" json:"Bitrate,omitempty"`
}

func (x *DeviceChannel) Reset() {
	*x = DeviceChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceChannel) ProtoMessage() {}

func (x *DeviceChannel) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceChannel.ProtoReflect.Descriptor instead.
func (*DeviceChannel) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceChannel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceChannel) GetDataURL() string {
	if x != nil {
		return x.DataURL
	}
	return ""
}

func (x *DeviceChannel) GetSnapshotURL() string {
	if x != nil {
		return x.SnapshotURL
	}
	return ""
}

func (x *DeviceChannel) GetVOD() bool {
	if x != nil {
		return x.VOD
	}
	return false
}

func (x *DeviceChannel) GetRecord() bool {
	if x != nil {
		return x.Record
	}
	return false
}

func (x *DeviceChannel) GetRecordTime() uint32 {
	if x != nil {
		return x.RecordTime
	}
	return 0
}

func (x *DeviceChannel) GetAudio() bool {
	if x != nil {
		return x.Audio
	}
	return false
}

func (x *DeviceChannel) GetRTPProxy() bool {
	if x != nil {
		return x.RTPProxy
	}
	return false
}

func (x *DeviceChannel) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *DeviceChannel) GetDebugRaw() bool {
	if x != nil {
		return x.DebugRaw
	}
	return false
}

func (x *DeviceChannel) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DeviceChannel) GetBitrate() float32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

type ConfigurationsDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceUniqID string                    `protobuf:"bytes,1,opt,name=DeviceUniqID,proto3" json:"DeviceUniqID,omitempty"`
	ChannelsMode string                    `protobuf:"bytes,2,opt,name=ChannelsMode,proto3" json:"ChannelsMode,omitempty"`
	Name         string                    `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	OnvifURL     string                    `protobuf:"bytes,4,opt,name=OnvifURL,proto3" json:"OnvifURL,omitempty"`
	Channels     map[string]*DeviceChannel `protobuf:"bytes,5,rep,name=Channels,proto3" json:"Channels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConfigurationsDeviceRequest) Reset() {
	*x = ConfigurationsDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationsDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationsDeviceRequest) ProtoMessage() {}

func (x *ConfigurationsDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationsDeviceRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationsDeviceRequest) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{1}
}

func (x *ConfigurationsDeviceRequest) GetDeviceUniqID() string {
	if x != nil {
		return x.DeviceUniqID
	}
	return ""
}

func (x *ConfigurationsDeviceRequest) GetChannelsMode() string {
	if x != nil {
		return x.ChannelsMode
	}
	return ""
}

func (x *ConfigurationsDeviceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConfigurationsDeviceRequest) GetOnvifURL() string {
	if x != nil {
		return x.OnvifURL
	}
	return ""
}

func (x *ConfigurationsDeviceRequest) GetChannels() map[string]*DeviceChannel {
	if x != nil {
		return x.Channels
	}
	return nil
}

type CodedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CodedReply) Reset() {
	*x = CodedReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodedReply) ProtoMessage() {}

func (x *CodedReply) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodedReply.ProtoReflect.Descriptor instead.
func (*CodedReply) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{2}
}

func (x *CodedReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BoolReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel bool `protobuf:"varint,1,opt,name=Channel,proto3" json:"Channel,omitempty"`
}

func (x *BoolReply) Reset() {
	*x = BoolReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolReply) ProtoMessage() {}

func (x *BoolReply) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolReply.ProtoReflect.Descriptor instead.
func (*BoolReply) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{3}
}

func (x *BoolReply) GetChannel() bool {
	if x != nil {
		return x.Channel
	}
	return false
}

type MapBoolReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels map[string]uint32 `protobuf:"bytes,1,rep,name=Channels,proto3" json:"Channels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapBoolReply) Reset() {
	*x = MapBoolReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapBoolReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapBoolReply) ProtoMessage() {}

func (x *MapBoolReply) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapBoolReply.ProtoReflect.Descriptor instead.
func (*MapBoolReply) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{4}
}

func (x *MapBoolReply) GetChannels() map[string]uint32 {
	if x != nil {
		return x.Channels
	}
	return nil
}

type DeviceUniqID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceUniqID string `protobuf:"bytes,1,opt,name=DeviceUniqID,proto3" json:"DeviceUniqID,omitempty"`
}

func (x *DeviceUniqID) Reset() {
	*x = DeviceUniqID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceUniqID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUniqID) ProtoMessage() {}

func (x *DeviceUniqID) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUniqID.ProtoReflect.Descriptor instead.
func (*DeviceUniqID) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{5}
}

func (x *DeviceUniqID) GetDeviceUniqID() string {
	if x != nil {
		return x.DeviceUniqID
	}
	return ""
}

type DeviceUniqIDAbdChannelUniqID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceUniqID  string `protobuf:"bytes,1,opt,name=DeviceUniqID,proto3" json:"DeviceUniqID,omitempty"`
	ChannelUniqID string `protobuf:"bytes,2,opt,name=ChannelUniqID,proto3" json:"ChannelUniqID,omitempty"`
}

func (x *DeviceUniqIDAbdChannelUniqID) Reset() {
	*x = DeviceUniqIDAbdChannelUniqID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceUniqIDAbdChannelUniqID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUniqIDAbdChannelUniqID) ProtoMessage() {}

func (x *DeviceUniqIDAbdChannelUniqID) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUniqIDAbdChannelUniqID.ProtoReflect.Descriptor instead.
func (*DeviceUniqIDAbdChannelUniqID) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{6}
}

func (x *DeviceUniqIDAbdChannelUniqID) GetDeviceUniqID() string {
	if x != nil {
		return x.DeviceUniqID
	}
	return ""
}

func (x *DeviceUniqIDAbdChannelUniqID) GetChannelUniqID() string {
	if x != nil {
		return x.ChannelUniqID
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{7}
}

type DevicesSummaryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Encoders map[string]*ConfigurationsDeviceRequest `protobuf:"bytes,1,rep,name=Encoders,proto3" json:"Encoders,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DevicesSummaryReply) Reset() {
	*x = DevicesSummaryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicesSummaryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicesSummaryReply) ProtoMessage() {}

func (x *DevicesSummaryReply) ProtoReflect() protoreflect.Message {
	mi := &file_server_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicesSummaryReply.ProtoReflect.Descriptor instead.
func (*DevicesSummaryReply) Descriptor() ([]byte, []int) {
	return file_server_server_proto_rawDescGZIP(), []int{8}
}

func (x *DevicesSummaryReply) GetEncoders() map[string]*ConfigurationsDeviceRequest {
	if x != nil {
		return x.Encoders
	}
	return nil
}

var File_server_server_proto protoreflect.FileDescriptor

var file_server_server_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x15, 0x0a, 0x0d,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x91, 0x01,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7d, 0x92, 0x41,
	0x7a, 0x2a, 0x13, 0xd0, 0x98, 0xd0, 0xbc, 0xd1, 0x8f, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbd,
	0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb0, 0x32, 0x47, 0xd0, 0x98, 0xd0, 0xbc, 0xd1, 0x8f, 0x20, 0xd1,
	0x83, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb9, 0xd1, 0x81, 0xd1, 0x82, 0xd0,
	0xb2, 0xd0, 0xb0, 0x20, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x8b, 0xd1, 0x87, 0xd0, 0xbd, 0xd0, 0xbe,
	0xd0, 0xb5, 0x20, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xba, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd0,
	0xb2, 0xd0, 0xbe, 0xd0, 0xb5, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb5, 0x2e, 0x4a,
	0x0a, 0x22, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x30, 0x22, 0xd2, 0x01, 0x04, 0x75, 0x75,
	0x69, 0x64, 0xd2, 0x01, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0xff, 0x01, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0xe4, 0x01, 0x92, 0x41, 0xe0, 0x01, 0x2a, 0x50, 0xd0, 0x9f, 0xd1, 0x83,
	0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd0, 0xb4, 0xd0, 0xbe, 0x20, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82,
	0xd0, 0xbe, 0xd1, 0x87, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0x20, 0xd0, 0xb2, 0xd0,
	0xb8, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbe, 0x20, 0x2f, 0x20, 0xd0, 0xb0, 0xd1, 0x83, 0xd0, 0xb4,
	0xd0, 0xb8, 0x20, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0x20,
	0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0, 0x32, 0x56, 0xd0, 0xa3,
	0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb7, 0xd1, 0x8b, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xb5, 0xd1, 0x82,
	0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd0, 0xb2, 0x20, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb5,
	0x20, 0x75, 0x72, 0x6c, 0x20, 0xd1, 0x81, 0xd1, 0x81, 0xd1, 0x8b, 0xd0, 0xbb, 0xd0, 0xba, 0xd0,
	0xb8, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb5,
	0xd1, 0x80, 0x20, 0x72, 0x74, 0x73, 0x70, 0x20, 0xd0, 0xb8, 0xd0, 0xbb, 0xd0, 0xb8, 0x20, 0x68,
	0x74, 0x74, 0x70, 0x2e, 0x4a, 0x25, 0x22, 0x72, 0x74, 0x73, 0x70, 0x3a, 0x2f, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x3a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x40, 0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e,
	0x30, 0x2e, 0x31, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x31, 0x22, 0xd2, 0x01, 0x06, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0xd2, 0x01, 0x03, 0x75, 0x72, 0x6c, 0x52, 0x07, 0x44, 0x61, 0x74, 0x61,
	0x55, 0x52, 0x4c, 0x12, 0xf8, 0x01, 0x0a, 0x0b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0xd5, 0x01, 0x92, 0x41, 0xd1, 0x01,
	0x2a, 0x3e, 0xd0, 0x9f, 0xd1, 0x83, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd0, 0xb4, 0xd0, 0xbe, 0x20,
	0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x87, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba,
	0xd0, 0xb0, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0,
	0xbe, 0xd0, 0xba, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0,
	0x32, 0x56, 0xd0, 0xa3, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb7, 0xd1, 0x8b, 0xd0, 0xb2, 0xd0, 0xb0,
	0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd0, 0xb2, 0x20, 0xd0, 0xb2, 0xd0, 0xb8,
	0xd0, 0xb4, 0xd0, 0xb5, 0x20, 0x75, 0x72, 0x6c, 0x20, 0xd1, 0x81, 0xd1, 0x81, 0xd1, 0x8b, 0xd0,
	0xbb, 0xd0, 0xba, 0xd0, 0xb8, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb8,
	0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0x20, 0x72, 0x74, 0x73, 0x70, 0x20, 0xd0, 0xb8, 0xd0, 0xbb,
	0xd0, 0xb8, 0x20, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x4a, 0x28, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x40, 0x31, 0x32,
	0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6a, 0x70, 0x65,
	0x67, 0x22, 0xd2, 0x01, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xd2, 0x01, 0x03, 0x75, 0x72,
	0x6c, 0x52, 0x0b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x52, 0x4c, 0x12, 0xb4,
	0x02, 0x0a, 0x03, 0x56, 0x4f, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0xa1, 0x02, 0x92,
	0x41, 0x9d, 0x02, 0x2a, 0x50, 0xd0, 0x92, 0xd0, 0xba, 0xd0, 0xbb, 0xd1, 0x8e, 0xd1, 0x87, 0xd0,
	0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0x2f, 0x20, 0xd0, 0x9e, 0xd1, 0x82, 0xd0, 0xba,
	0xd0, 0xbb, 0xd1, 0x8e, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0xd1,
	0x80, 0xd0, 0xb5, 0xd0, 0xb6, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb0, 0x20, 0xd0, 0xbf, 0xd0, 0xbe,
	0x20, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0,
	0xbd, 0xd0, 0xb8, 0xd1, 0x8e, 0x32, 0xb9, 0x01, 0xd0, 0x92, 0xd0, 0xba, 0xd0, 0xbb, 0xd1, 0x8e,
	0xd1, 0x87, 0xd0, 0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0x2f, 0x20, 0xd0, 0x9e, 0xd1, 0x82, 0xd0,
	0xba, 0xd0, 0xbb, 0xd1, 0x8e, 0xd1, 0x87, 0xd0, 0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd1, 0x80,
	0xd0, 0xb5, 0xd0, 0xb6, 0xd0, 0xb8, 0xd0, 0xbc, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0x20, 0xd1, 0x82,
	0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8,
	0xd1, 0x8e, 0x2c, 0x20, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb9, 0x20, 0xd0,
	0xbf, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xba, 0x20, 0xd0, 0xb0, 0xd0, 0xb2, 0xd1, 0x82,
	0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x81,
	0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xb9, 0x20, 0xd0, 0xb2, 0xd1, 0x8b, 0xd0, 0xba, 0xd0, 0xbb, 0xd1,
	0x8e, 0xd1, 0x87, 0xd0, 0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd0, 0xba,
	0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb4, 0xd0, 0xb0, 0x20, 0xd0, 0xbd, 0xd0, 0xb5, 0xd1, 0x82, 0x20,
	0xd0, 0xb7, 0xd1, 0x80, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb9,
	0x2e, 0x4a, 0x06, 0x22, 0x74, 0x72, 0x75, 0x65, 0x22, 0xd2, 0x01, 0x04, 0x62, 0x6f, 0x6f, 0x6c,
	0x52, 0x03, 0x56, 0x4f, 0x44, 0x12, 0xcd, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0xb4, 0x01, 0x92, 0x41, 0xb0, 0x01, 0x2a, 0x50, 0xd0,
	0x92, 0xd0, 0xba, 0xd0, 0xbb, 0xd1, 0x8e, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0,
	0xb5, 0x20, 0x2f, 0x20, 0xd0, 0x9e, 0xd1, 0x82, 0xd0, 0xba, 0xd0, 0xbb, 0xd1, 0x8e, 0xd1, 0x87,
	0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xbf, 0xd0,
	0xb8, 0xd1, 0x81, 0xd0, 0xb8, 0x20, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x85, 0xd0, 0xb8, 0xd0, 0xb2,
	0xd0, 0xb0, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0, 0x32,
	0x4d, 0xd0, 0x92, 0xd0, 0xba, 0xd0, 0xbb, 0xd1, 0x8e, 0xd1, 0x87, 0xd0, 0xb0, 0xd0, 0xb5, 0xd1,
	0x82, 0x20, 0x2f, 0x20, 0xd0, 0x9e, 0xd1, 0x82, 0xd0, 0xba, 0xd0, 0xbb, 0xd1, 0x8e, 0xd1, 0x87,
	0xd0, 0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1,
	0x81, 0xd1, 0x8c, 0x20, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x85, 0xd0, 0xb8, 0xd0, 0xb2, 0xd0, 0xb0,
	0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0, 0x2e, 0x4a, 0x06,
	0x22, 0x74, 0x72, 0x75, 0x65, 0x22, 0xd2, 0x01, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x81, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x61, 0x92, 0x41, 0x5e, 0x2a,
	0x25, 0xd0, 0x92, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xbc, 0xd1, 0x8f, 0x20, 0xd0, 0xb7, 0xd0, 0xb0,
	0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb8, 0x20, 0xd0, 0xb2, 0x20, 0xd1, 0x87, 0xd0, 0xb0,
	0xd1, 0x81, 0xd0, 0xb0, 0xd1, 0x85, 0x32, 0x26, 0xd0, 0x92, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xbc,
	0xd1, 0x8f, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb8, 0x20,
	0xd0, 0xb2, 0x20, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xb0, 0xd1, 0x85, 0x2e, 0x4a, 0x04,
	0x22, 0x32, 0x34, 0x22, 0xd2, 0x01, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x0a, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0xd1, 0x01, 0x0a, 0x05, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0xba, 0x01, 0x92, 0x41, 0xb6, 0x01,
	0x2a, 0x56, 0xd0, 0x92, 0xd0, 0xba, 0xd0, 0xbb, 0xd1, 0x8e, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd,
	0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0x2f, 0x20, 0xd0, 0x9e, 0xd1, 0x82, 0xd0, 0xba, 0xd0, 0xbb, 0xd1,
	0x8e, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0xd0, 0xb7, 0xd0, 0xb2,
	0xd1, 0x83, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb9, 0x20, 0xd0, 0xb4, 0xd0,
	0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb6, 0xd0, 0xba, 0xd0, 0xb8, 0x20, 0xd0, 0xbf, 0xd0, 0xbe,
	0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0, 0x32, 0x4d, 0xd0, 0x92, 0xd0, 0xba, 0xd0, 0xbb,
	0xd1, 0x8e, 0xd1, 0x87, 0xd0, 0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0x2f, 0x20, 0xd0, 0x9e, 0xd1,
	0x82, 0xd0, 0xba, 0xd0, 0xbb, 0xd1, 0x8e, 0xd1, 0x87, 0xd0, 0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0x20,
	0xd0, 0xb7, 0xd0, 0xb2, 0xd1, 0x83, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb9,
	0x20, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xba, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x82,
	0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0, 0x2e, 0x4a, 0x06, 0x22, 0x74, 0x72, 0x75, 0x65, 0x22, 0xd2,
	0x01, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0xd2, 0x01,
	0x0a, 0x08, 0x52, 0x54, 0x50, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x42, 0xb5, 0x01, 0x92, 0x41, 0xb1, 0x01, 0x2a, 0x4a, 0xd0, 0x92, 0xd0, 0xba, 0xd0, 0xbb, 0xd1,
	0x8e, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0x2f, 0x20, 0xd0, 0x9e,
	0xd1, 0x82, 0xd0, 0xba, 0xd0, 0xbb, 0xd1, 0x8e, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8,
	0xd0, 0xb5, 0x20, 0x72, 0x74, 0x73, 0x70, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xba,
	0xd1, 0x81, 0xd0, 0xb8, 0x20, 0xd1, 0x81, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1,
	0x80, 0xd0, 0xb0, 0x32, 0x54, 0xd0, 0x92, 0xd0, 0xba, 0xd0, 0xbb, 0xd1, 0x8e, 0xd1, 0x87, 0xd0,
	0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0x2f, 0x20, 0xd0, 0x9e, 0xd1, 0x82, 0xd0, 0xba, 0xd0, 0xbb,
	0xd1, 0x8e, 0xd1, 0x87, 0xd0, 0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0,
	0xbe, 0xd0, 0xba, 0xd1, 0x81, 0xd0, 0xb8, 0x20, 0xd1, 0x81, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb2,
	0xd0, 0xb5, 0xd1, 0x80, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd0, 0xbf, 0xd0, 0xbe,
	0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0, 0x2e, 0x4a, 0x06, 0x22, 0x74, 0x72, 0x75, 0x65,
	0x22, 0xd2, 0x01, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x52, 0x08, 0x52, 0x54, 0x50, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x12, 0xa2, 0x02, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x8b, 0x02, 0x92, 0x41, 0x87, 0x02, 0x2a, 0x75, 0xd0, 0x92, 0xd0, 0xba, 0xd0,
	0xbb, 0xd1, 0x8e, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0x2f, 0x20,
	0xd0, 0x9e, 0xd1, 0x82, 0xd0, 0xba, 0xd0, 0xbb, 0xd1, 0x8e, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd,
	0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0,
	0xb8, 0x20, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbb, 0xd0, 0xb0, 0xd0, 0xb4, 0xd0, 0xba, 0xd0, 0xb8,
	0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0, 0x20, 0xd0, 0xb2,
	0x20, 0xd1, 0x81, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xbd, 0xd1,
	0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xb6, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbb,
	0x32, 0x7f, 0xd0, 0x92, 0xd0, 0xba, 0xd0, 0xbb, 0xd1, 0x8e, 0xd1, 0x87, 0xd0, 0xb0, 0xd0, 0xb5,
	0xd1, 0x82, 0x20, 0x2f, 0x20, 0xd0, 0x9e, 0xd1, 0x82, 0xd0, 0xba, 0xd0, 0xbb, 0xd1, 0x8e, 0xd1,
	0x87, 0xd0, 0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xbf, 0xd0, 0xb8,
	0xd1, 0x81, 0xd1, 0x8c, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xb4, 0xd1, 0x80, 0xd0, 0xbe, 0xd0,
	0xb1, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0x20, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb3,
	0xd0, 0xb8, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f,
	0x20, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x89, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0,
	0xb8, 0xd0, 0xb9, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0,
	0x2e, 0x4a, 0x06, 0x22, 0x74, 0x72, 0x75, 0x65, 0x22, 0xd2, 0x01, 0x04, 0x62, 0x6f, 0x6f, 0x6c,
	0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x9e, 0x02, 0x0a, 0x08, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x61, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x81, 0x02, 0x92, 0x41, 0xfd,
	0x01, 0x2a, 0x7b, 0xd0, 0x92, 0xd0, 0xba, 0xd0, 0xbb, 0xd1, 0x8e, 0xd1, 0x87, 0xd0, 0xb5, 0xd0,
	0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0x2f, 0x20, 0xd0, 0x9e, 0xd1, 0x82, 0xd0, 0xba, 0xd0, 0xbb,
	0xd1, 0x8e, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0xd0, 0xb7, 0xd0,
	0xb0, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb8, 0x20, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbb,
	0xd0, 0xb0, 0xd0, 0xb4, 0xd0, 0xba, 0xd0, 0xb8, 0x20, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0,
	0xb5, 0xd0, 0xbe, 0x20, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85,
	0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0, 0x20, 0xd0, 0xb2,
	0x20, 0x2e, 0x32, 0x36, 0x34, 0x20, 0xd1, 0x84, 0xd0, 0xb0, 0xd0, 0xb9, 0xd0, 0xbb, 0x32, 0x6f,
	0xd0, 0x92, 0xd0, 0xba, 0xd0, 0xbb, 0xd1, 0x8e, 0xd1, 0x87, 0xd0, 0xb0, 0xd0, 0xb5, 0xd1, 0x82,
	0x20, 0x2f, 0x20, 0xd0, 0x9e, 0xd1, 0x82, 0xd0, 0xba, 0xd0, 0xbb, 0xd1, 0x8e, 0xd1, 0x87, 0xd0,
	0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81,
	0xd1, 0x8c, 0x20, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbb, 0xd0, 0xb0, 0xd0, 0xb4, 0xd0, 0xbe, 0xd1,
	0x87, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x82,
	0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0, 0x20, 0xd0, 0xb2, 0x20, 0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80,
	0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0x20, 0x2e, 0x68, 0x32, 0x36, 0x34, 0x2e, 0x4a,
	0x06, 0x22, 0x74, 0x72, 0x75, 0x65, 0x22, 0xd2, 0x01, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x52, 0x08,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x61, 0x77, 0x12, 0xc9, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0xb0, 0x01, 0x92, 0x41, 0xac, 0x01,
	0x2a, 0x50, 0xd0, 0x90, 0xd0, 0xba, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xb2, 0xd0, 0xb5, 0xd0, 0xbd,
	0x20, 0x2f, 0x20, 0xd0, 0x9e, 0xd1, 0x82, 0xd0, 0xba, 0xd0, 0xbb, 0xd1, 0x8e, 0xd1, 0x87, 0xd0,
	0xb5, 0xd0, 0xbd, 0x20, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xba, 0xd1, 0x83, 0xd1, 0x89, 0xd0, 0xb5,
	0xd0, 0xb5, 0x20, 0xd1, 0x81, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x8f, 0xd0,
	0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xba,
	0xd0, 0xb0, 0x32, 0x4a, 0xd0, 0x9f, 0xd1, 0x80, 0xd0, 0xb8, 0x20, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0,
	0xb1, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb8, 0x20,
	0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb5, 0x20, 0xd0, 0xbf, 0xd0,
	0xbe, 0xd0, 0xbb, 0xd0, 0xb5, 0x20, 0xd0, 0xbd, 0xd0, 0xb5, 0x20, 0xd1, 0x82, 0xd1, 0x80, 0xd0,
	0xb5, 0xd0, 0xb1, 0xd1, 0x83, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x2e, 0x4a, 0x03,
	0x22, 0x30, 0x22, 0xd2, 0x01, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x07, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x42, 0x7f, 0x92, 0x41, 0x7c, 0x2a, 0x1b, 0xd0, 0x91, 0xd0,
	0xb8, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb9, 0xd1, 0x82, 0x20, 0xd0, 0xbf, 0xd0, 0xbe,
	0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0, 0x32, 0x4a, 0xd0, 0x9f, 0xd1, 0x80, 0xd0, 0xb8,
	0x20, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0,
	0xbd, 0xd0, 0xb8, 0xd0, 0xb8, 0x20, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd0, 0xbe,
	0xd0, 0xb5, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb5, 0x20, 0xd0, 0xbd, 0xd0, 0xb5,
	0x20, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb1, 0xd1, 0x83, 0xd0, 0xb5, 0xd1, 0x82, 0xd1,
	0x81, 0xd1, 0x8f, 0x2e, 0x4a, 0x09, 0x22, 0x31, 0x30, 0x32, 0x34, 0x2e, 0x30, 0x30, 0x22, 0xd2,
	0x01, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x07, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x22, 0x8a, 0x0b, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0xac, 0x02, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x87, 0x02, 0x92, 0x41, 0x83, 0x02, 0x2a, 0x44,
	0xd0, 0xa3, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd,
	0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0,
	0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0x20,
	0xd1, 0x83, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb9, 0xd1, 0x81, 0xd1, 0x82,
	0xd0, 0xb2, 0xd0, 0xb0, 0x32, 0x82, 0x01, 0xd0, 0xa3, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0,
	0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xb8, 0xd0, 0xb4,
	0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0,
	0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0x20, 0xd1, 0x83, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0,
	0xbe, 0xd0, 0xb9, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb0, 0x2c, 0x20, 0xd1, 0x80, 0xd0,
	0xb5, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb4, 0xd1, 0x83, 0xd0,
	0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xbe,
	0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x8c,
	0x20, 0x75, 0x75, 0x69, 0x64, 0x20, 0x76, 0x32, 0x2e, 0x4a, 0x26, 0x22, 0x31, 0x32, 0x33, 0x65,
	0x34, 0x35, 0x36, 0x37, 0x2d, 0x65, 0x38, 0x39, 0x62, 0x2d, 0x31, 0x32, 0x64, 0x33, 0x2d, 0x61,
	0x34, 0x35, 0x36, 0x2d, 0x34, 0x32, 0x36, 0x36, 0x31, 0x34, 0x31, 0x37, 0x34, 0x30, 0x30, 0x30,
	0x22, 0xd2, 0x01, 0x04, 0x75, 0x75, 0x69, 0x64, 0xd2, 0x01, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x44, 0x12,
	0xa9, 0x02, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x84, 0x02, 0x92, 0x41, 0x80, 0x02, 0x2a, 0x24, 0xd0,
	0xa0, 0xd0, 0xb5, 0xd0, 0xb6, 0xd0, 0xb8, 0xd0, 0xbc, 0x20, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb1,
	0xd0, 0xbe, 0xd1, 0x82, 0xd1, 0x8b, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0,
	0xbb, 0xd0, 0xb0, 0x32, 0xc0, 0x01, 0xd0, 0xa0, 0xd0, 0xb5, 0xd0, 0xb6, 0xd0, 0xb8, 0xd0, 0xbc,
	0x20, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xbe, 0xd1, 0x82, 0xd1, 0x8b, 0x20, 0xd0, 0xba,
	0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb0, 0x2c, 0x20, 0xd0, 0xb2, 0x20, 0xd1,
	0x81, 0xd0, 0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd0, 0xb0, 0xd0, 0xb8, 0x20, 0xd1, 0x83, 0xd0, 0xba,
	0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0x6f, 0x6e, 0x76,
	0x69, 0x66, 0x20, 0xd1, 0x83, 0x20, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x88, 0xd0, 0xb8, 0xd1, 0x85,
	0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb2, 0x20,
	0xd0, 0xb1, 0xd1, 0x83, 0xd0, 0xb4, 0xd1, 0x83, 0xd1, 0x82, 0x20, 0xd0, 0xb0, 0xd0, 0xb2, 0xd1,
	0x82, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x87, 0xd0, 0xb5, 0xd1,
	0x81, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xb9, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xbf, 0xd0, 0xbe,
	0xd0, 0xbb, 0xd0, 0xbd, 0xd1, 0x8f, 0xd1, 0x82, 0xd1, 0x8c, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0x44,
	0x61, 0x74, 0x61, 0x55, 0x52, 0x4c, 0x20, 0xd0, 0xb8, 0x20, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x55, 0x52, 0x4c, 0x2e, 0x4a, 0x06, 0x22, 0x72, 0x74, 0x73, 0x70, 0x22, 0xd2, 0x01,
	0x04, 0x72, 0x74, 0x73, 0x70, 0xd2, 0x01, 0x05, 0x6f, 0x6e, 0x76, 0x69, 0x66, 0x52, 0x0c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7c, 0x92, 0x41, 0x79, 0x2a,
	0x1b, 0xd0, 0x98, 0xd0, 0xbc, 0xd1, 0x8f, 0x20, 0xd0, 0xa3, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80,
	0xd0, 0xbe, 0xd0, 0xb9, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb0, 0x32, 0x3f, 0xd0, 0x98,
	0xd0, 0xbc, 0xd1, 0x8f, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0,
	0xb0, 0x20, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x8b, 0xd1, 0x87, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb5,
	0x20, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xba, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0,
	0xbe, 0xd0, 0xb5, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb5, 0x2e, 0x4a, 0x09, 0x22,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x30, 0x22, 0xd2, 0x01, 0x04, 0x75, 0x75, 0x69, 0x64, 0xd2,
	0x01, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x9f,
	0x03, 0x0a, 0x08, 0x4f, 0x6e, 0x76, 0x69, 0x66, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x82, 0x03, 0x92, 0x41, 0xfe, 0x02, 0x2a, 0x5c, 0xd0, 0x9f, 0xd1, 0x83, 0xd1, 0x82,
	0xd1, 0x8c, 0x20, 0xd0, 0xb4, 0xd0, 0xbe, 0x20, 0x6f, 0x6e, 0x76, 0x69, 0x66, 0x20, 0xd1, 0x81,
	0xd1, 0x81, 0xd1, 0x8b, 0xd0, 0xbb, 0xd0, 0xba, 0xd0, 0xb0, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1,
	0x8f, 0x20, 0xd0, 0xb4, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x83, 0xd0, 0xbf, 0xd0, 0xb0,
	0x20, 0xd0, 0xba, 0x20, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb0, 0x20, 0xd0, 0xb4, 0xd0,
	0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xbc, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x82,
	0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0, 0x32, 0xee, 0x01, 0xd0, 0xa3, 0xd0, 0xba, 0xd0, 0xb0, 0xd0,
	0xb7, 0xd1, 0x8b, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x20,
	0xd0, 0xb2, 0x20, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb5, 0x20, 0x75, 0x72, 0x6c, 0x20,
	0xd1, 0x81, 0xd1, 0x81, 0xd1, 0x8b, 0xd0, 0xbb, 0xd0, 0xba, 0xd0, 0xb8, 0x20, 0xd0, 0xbd, 0xd0,
	0xb0, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0x20, 0x68, 0x74,
	0x74, 0x70, 0x2e, 0x20, 0xd0, 0x9f, 0xd0, 0xbe, 0x20, 0xd1, 0x83, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0,
	0xbb, 0xd1, 0x87, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8e, 0x20, 0xd0, 0xb8, 0xd1, 0x81,
	0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xb7, 0xd1, 0x83, 0xd0, 0xb5, 0xd1, 0x82,
	0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x80, 0xd1, 0x82, 0x20, 0x38, 0x30,
	0x2c, 0x20, 0xd0, 0xb2, 0x20, 0x75, 0x72, 0x6c, 0x20, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb6, 0xd0,
	0xbd, 0xd0, 0xbe, 0x20, 0xd1, 0x83, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x82,
	0xd1, 0x8c, 0x20, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb8, 0xd0, 0xbd, 0x20, 0xd0, 0xb8,
	0x20, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0x20, 0xd0, 0xb2,
	0x20, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb4, 0xd0, 0xb0, 0xd1, 0x80, 0xd1,
	0x82, 0xd0, 0xbe, 0xd0, 0xbc, 0x20, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb0,
	0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb5, 0x2e, 0x4a, 0x1e, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x40, 0x31, 0x32, 0x37,
	0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x22, 0xd2, 0x01, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0xd2, 0x01, 0x03, 0x75, 0x72, 0x6c, 0x52, 0x08, 0x4f, 0x6e, 0x76, 0x69, 0x66, 0x55, 0x52, 0x4c,
	0x12, 0x86, 0x01, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x37, 0x92, 0x41, 0x34, 0x2a, 0x27, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x20, 0x30, 0x20, 0x31, 0x20, 0x32, 0x20, 0x33, 0x2e, 0x2e, 0x2e, 0x2e, 0x20,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x32, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x08, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a, 0x52, 0x0a, 0x0d, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa4, 0x01,
	0x0a, 0x0a, 0x43, 0x6f, 0x64, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x95, 0x01, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7b,
	0x92, 0x41, 0x78, 0x2a, 0x1b, 0xd0, 0xa2, 0xd0, 0xb5, 0xd0, 0xba, 0xd1, 0x81, 0xd1, 0x82, 0xd0,
	0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb5, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb5,
	0x32, 0x4e, 0xd0, 0x9e, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd0, 0xb2, 0x20,
	0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0x20, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x8b, 0xd1, 0x87, 0xd0, 0xbd,
	0xd0, 0xbe, 0xd0, 0xb5, 0x20, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xba, 0xd1, 0x81, 0xd1, 0x82, 0xd0,
	0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb5, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb5,
	0x4a, 0x09, 0x22, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x75, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x5b, 0x92, 0x41, 0x58, 0x2a, 0x1e, 0xd0, 0x97, 0xd0, 0xbd, 0xd0, 0xb0,
	0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20,
	0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb5, 0x32, 0x2e, 0xd0, 0x9e, 0xd1, 0x82, 0xd0, 0xb2,
	0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd0, 0xb2, 0x20, 0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbc,
	0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x74, 0x72, 0x75, 0x65,
	0x20, 0x2f, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x4a, 0x06, 0x22, 0x74, 0x72, 0x75, 0x65, 0x22,
	0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x94, 0x02, 0x0a, 0x0c, 0x4d, 0x61,
	0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0xc6, 0x01, 0x0a, 0x08, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x85, 0x01, 0x92, 0x41, 0x81, 0x01, 0x2a, 0x2d, 0xd0, 0x9c, 0xd0, 0xb0, 0xd1, 0x81,
	0xd1, 0x81, 0xd0, 0xb8, 0xd0, 0xb2, 0x20, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x87, 0xd0,
	0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x20, 0xd0,
	0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb5, 0x32, 0x3f, 0xd0, 0x9e, 0xd1, 0x82, 0xd0, 0xb2, 0xd0,
	0xb5, 0xd1, 0x82, 0x20, 0xd0, 0xb2, 0x20, 0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbc, 0xd0,
	0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0x20, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x81, 0xd0, 0xb8,
	0xd0, 0xb2, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x20, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb0,
	0xd1, 0x82, 0xd1, 0x83, 0xd1, 0x81, 0xd1, 0x8b, 0x4a, 0x0f, 0x7b, 0x22, 0x30, 0x22, 0x3a, 0x20,
	0x31, 0x2c, 0x22, 0x31, 0x22, 0x3a, 0x20, 0x30, 0x7d, 0x52, 0x08, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xff, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x49,
	0x44, 0x12, 0xee, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x71,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xc9, 0x01, 0x92, 0x41, 0xc5, 0x01, 0x2a,
	0x44, 0xd0, 0xa3, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0,
	0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82,
	0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80,
	0x20, 0xd1, 0x83, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb9, 0xd1, 0x81, 0xd1,
	0x82, 0xd0, 0xb2, 0xd0, 0xb0, 0x32, 0x45, 0xd0, 0xa3, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0,
	0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xb8, 0xd0, 0xb4,
	0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0,
	0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0x20, 0xd1, 0x83, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0,
	0xbe, 0xd0, 0xb9, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb0, 0x2e, 0x4a, 0x26, 0x22, 0x31,
	0x32, 0x33, 0x65, 0x34, 0x35, 0x36, 0x37, 0x2d, 0x65, 0x38, 0x39, 0x62, 0x2d, 0x31, 0x32, 0x64,
	0x33, 0x2d, 0x61, 0x34, 0x35, 0x36, 0x2d, 0x34, 0x32, 0x36, 0x36, 0x31, 0x34, 0x31, 0x37, 0x34,
	0x30, 0x30, 0x30, 0x22, 0xd2, 0x01, 0x04, 0x75, 0x75, 0x69, 0x64, 0xd2, 0x01, 0x06, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x71,
	0x49, 0x44, 0x22, 0xcf, 0x03, 0x0a, 0x1c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69,
	0x71, 0x49, 0x44, 0x41, 0x62, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x6e, 0x69,
	0x71, 0x49, 0x44, 0x12, 0xee, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e,
	0x69, 0x71, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xc9, 0x01, 0x92, 0x41, 0xc5,
	0x01, 0x2a, 0x44, 0xd0, 0xa3, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1,
	0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd,
	0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe,
	0xd1, 0x80, 0x20, 0xd1, 0x83, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb9, 0xd1,
	0x81, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb0, 0x32, 0x45, 0xd0, 0xa3, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0,
	0xba, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xb8,
	0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba,
	0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0x20, 0xd1, 0x83, 0xd1, 0x81, 0xd1, 0x82, 0xd1,
	0x80, 0xd0, 0xbe, 0xd0, 0xb9, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb0, 0x2e, 0x4a, 0x26,
	0x22, 0x31, 0x32, 0x33, 0x65, 0x34, 0x35, 0x36, 0x37, 0x2d, 0x65, 0x38, 0x39, 0x62, 0x2d, 0x31,
	0x32, 0x64, 0x33, 0x2d, 0x61, 0x34, 0x35, 0x36, 0x2d, 0x34, 0x32, 0x36, 0x36, 0x31, 0x34, 0x31,
	0x37, 0x34, 0x30, 0x30, 0x30, 0x22, 0xd2, 0x01, 0x04, 0x75, 0x75, 0x69, 0x64, 0xd2, 0x01, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e,
	0x69, 0x71, 0x49, 0x44, 0x12, 0xbd, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x55, 0x6e, 0x69, 0x71, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x96, 0x01, 0x92,
	0x41, 0x92, 0x01, 0x2a, 0x3c, 0xd0, 0xa3, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd0,
	0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb5,
	0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82,
	0xd0, 0xbe, 0xd1, 0x80, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0,
	0xb0, 0x32, 0x3d, 0xd0, 0xa3, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1,
	0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd,
	0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe,
	0xd1, 0x80, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb0, 0x2e,
	0x4a, 0x03, 0x22, 0x31, 0x22, 0xd2, 0x01, 0x04, 0x75, 0x75, 0x69, 0x64, 0xd2, 0x01, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x6e,
	0x69, 0x71, 0x49, 0x44, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xec, 0x01,
	0x0a, 0x13, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x73, 0x0a, 0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x27, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x2e, 0x2e, 0x2e,
	0x20, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x60, 0x0a, 0x0d, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xb2, 0x0e, 0x0a,
	0x07, 0x47, 0x72, 0x65, 0x65, 0x74, 0x65, 0x72, 0x12, 0x6d, 0x0a, 0x17, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x50,
	0x69, 0x6e, 0x67, 0x12, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22,
	0x2f, 0x47, 0x52, 0x50, 0x43, 0x2f, 0x56, 0x36, 0x2f, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x50, 0x69,
	0x6e, 0x67, 0x92, 0x41, 0x02, 0x62, 0x00, 0x12, 0x73, 0x0a, 0x1a, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27,
	0x12, 0x25, 0x2f, 0x47, 0x52, 0x50, 0x43, 0x2f, 0x56, 0x36, 0x2f, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x92, 0x41, 0x02, 0x62, 0x00, 0x12, 0x75, 0x0a, 0x19,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f,
	0x47, 0x52, 0x50, 0x43, 0x2f, 0x56, 0x36, 0x2f, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x80, 0x01, 0x0a, 0x17, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x6e, 0x69, 0x71, 0x49, 0x44, 0x1a, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d,
	0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x39, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x47, 0x52, 0x50, 0x43, 0x2f, 0x56, 0x36, 0x2f, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x7b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x44, 0x7d, 0x2f,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xaf, 0x01, 0x0a, 0x1e, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x44, 0x41,
	0x62, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x44, 0x1a,
	0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x51, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x12, 0x49, 0x2f,
	0x47, 0x52, 0x50, 0x43, 0x2f, 0x56, 0x36, 0x2f, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x7b, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x44, 0x7d, 0x2f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x7b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x44,
	0x7d, 0x2f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x21, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x24,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e,
	0x69, 0x71, 0x49, 0x44, 0x41, 0x62, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x6e,
	0x69, 0x71, 0x49, 0x44, 0x1a, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x61,
	0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x54, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x4e, 0x12, 0x4c, 0x2f, 0x47, 0x52, 0x50, 0x43, 0x2f, 0x56, 0x36, 0x2f, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x7b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x44, 0x7d, 0x2f, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x7b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55,
	0x6e, 0x69, 0x71, 0x49, 0x44, 0x7d, 0x2f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x12, 0x84, 0x01, 0x0a, 0x1a, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12,
	0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x6e, 0x69, 0x71, 0x49, 0x44, 0x1a, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x36, 0x12, 0x34, 0x2f, 0x47, 0x52, 0x50, 0x43, 0x2f, 0x56, 0x36, 0x2f, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x7b,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x44, 0x7d, 0x2f, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x91, 0x01, 0x0a, 0x18, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x44, 0x1a, 0x23, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x47, 0x52, 0x50, 0x43, 0x2f, 0x56,
	0x36, 0x2f, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x7b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x71,
	0x49, 0x44, 0x7d, 0x2f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x6e, 0x0a, 0x1a, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x47, 0x52, 0x50, 0x43, 0x2f, 0x56, 0x36, 0x2f, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x9a, 0x01, 0x0a, 0x1c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x22, 0x36, 0x2f,
	0x47, 0x52, 0x50, 0x43, 0x2f, 0x56, 0x36, 0x2f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x7b, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x44, 0x7d, 0x2f, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x98, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x1a, 0x35, 0x2f, 0x47, 0x52, 0x50, 0x43,
	0x2f, 0x56, 0x36, 0x2f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x7b, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x44, 0x7d, 0x2f, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x3a, 0x01, 0x2a, 0x12, 0x88, 0x01, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x44, 0x1a, 0x12, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x2a, 0x36, 0x2f, 0x47, 0x52, 0x50, 0x43, 0x2f, 0x56, 0x36,
	0x2f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x7b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e,
	0x69, 0x71, 0x49, 0x44, 0x7d, 0x2f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x90,
	0x01, 0x0a, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x49, 0x44, 0x1a, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x42, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x12, 0x3a, 0x2f, 0x47, 0x52, 0x50, 0x43, 0x2f, 0x56, 0x36, 0x2f,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x7b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69,
	0x71, 0x49, 0x44, 0x7d, 0x2f, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0xdb, 0x02, 0x0a, 0x12, 0x69, 0x6f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1c, 0x70, 0x62, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x92, 0x41, 0x96, 0x02, 0x12, 0x8b, 0x01, 0x0a, 0x15, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x73, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x22, 0x2b, 0x0a, 0x06, 0x41, 0x6e, 0x64, 0x72, 0x65, 0x79, 0x12, 0x11, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x75,
	0x1a, 0x0e, 0x69, 0x6e, 0x66, 0x6f, 0x40, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x75,
	0x2a, 0x40, 0x0a, 0x07, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x65, 0x65, 0x70, 0x63, 0x68, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x62, 0x6c,
	0x6f, 0x62, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x2e,
	0x6d, 0x64, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x03, 0x01, 0x02, 0x04, 0x32, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x5d,
	0x0a, 0x5b, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x4d,
	0x08, 0x02, 0x12, 0x38, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x3a, 0x20, 0x42, 0x65,
	0x61, 0x72, 0x65, 0x72, 0x20, 0x3c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3e, 0x1a, 0x0d, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x62, 0x10, 0x0a,
	0x0e, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_server_server_proto_rawDescOnce sync.Once
	file_server_server_proto_rawDescData = file_server_server_proto_rawDesc
)

func file_server_server_proto_rawDescGZIP() []byte {
	file_server_server_proto_rawDescOnce.Do(func() {
		file_server_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_server_proto_rawDescData)
	})
	return file_server_server_proto_rawDescData
}

var file_server_server_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_server_server_proto_goTypes = []interface{}{
	(*DeviceChannel)(nil),                // 0: server.DeviceChannel
	(*ConfigurationsDeviceRequest)(nil),  // 1: server.ConfigurationsDeviceRequest
	(*CodedReply)(nil),                   // 2: server.CodedReply
	(*BoolReply)(nil),                    // 3: server.BoolReply
	(*MapBoolReply)(nil),                 // 4: server.MapBoolReply
	(*DeviceUniqID)(nil),                 // 5: server.DeviceUniqID
	(*DeviceUniqIDAbdChannelUniqID)(nil), // 6: server.DeviceUniqIDAbdChannelUniqID
	(*Empty)(nil),                        // 7: server.Empty
	(*DevicesSummaryReply)(nil),          // 8: server.DevicesSummaryReply
	nil,                                  // 9: server.ConfigurationsDeviceRequest.ChannelsEntry
	nil,                                  // 10: server.MapBoolReply.ChannelsEntry
	nil,                                  // 11: server.DevicesSummaryReply.EncodersEntry
}
var file_server_server_proto_depIdxs = []int32{
	9,  // 0: server.ConfigurationsDeviceRequest.Channels:type_name -> server.ConfigurationsDeviceRequest.ChannelsEntry
	10, // 1: server.MapBoolReply.Channels:type_name -> server.MapBoolReply.ChannelsEntry
	11, // 2: server.DevicesSummaryReply.Encoders:type_name -> server.DevicesSummaryReply.EncodersEntry
	0,  // 3: server.ConfigurationsDeviceRequest.ChannelsEntry.value:type_name -> server.DeviceChannel
	1,  // 4: server.DevicesSummaryReply.EncodersEntry.value:type_name -> server.ConfigurationsDeviceRequest
	7,  // 5: server.Greeter.InformationPlatformPing:input_type -> server.Empty
	7,  // 6: server.Greeter.InformationPlatformVersion:input_type -> server.Empty
	7,  // 7: server.Greeter.InformationDevicesSummary:input_type -> server.Empty
	5,  // 8: server.Greeter.InformationDeviceStatus:input_type -> server.DeviceUniqID
	6,  // 9: server.Greeter.InformationDeviceChannelStatus:input_type -> server.DeviceUniqIDAbdChannelUniqID
	6,  // 10: server.Greeter.InformationDeviceChannelStatistic:input_type -> server.DeviceUniqIDAbdChannelUniqID
	5,  // 11: server.Greeter.InformationDeviceStatistic:input_type -> server.DeviceUniqID
	5,  // 12: server.Greeter.InformationDeviceSummary:input_type -> server.DeviceUniqID
	7,  // 13: server.Greeter.InformationPlatformSummary:input_type -> server.Empty
	1,  // 14: server.Greeter.ConfigurationsDeviceAddition:input_type -> server.ConfigurationsDeviceRequest
	1,  // 15: server.Greeter.ConfigurationsDeviceEditing:input_type -> server.ConfigurationsDeviceRequest
	5,  // 16: server.Greeter.ConfigurationsDeviceDeletion:input_type -> server.DeviceUniqID
	5,  // 17: server.Greeter.ConfigurationsDeviceReconnection:input_type -> server.DeviceUniqID
	2,  // 18: server.Greeter.InformationPlatformPing:output_type -> server.CodedReply
	2,  // 19: server.Greeter.InformationPlatformVersion:output_type -> server.CodedReply
	8,  // 20: server.Greeter.InformationDevicesSummary:output_type -> server.DevicesSummaryReply
	4,  // 21: server.Greeter.InformationDeviceStatus:output_type -> server.MapBoolReply
	4,  // 22: server.Greeter.InformationDeviceChannelStatus:output_type -> server.MapBoolReply
	4,  // 23: server.Greeter.InformationDeviceChannelStatistic:output_type -> server.MapBoolReply
	2,  // 24: server.Greeter.InformationDeviceStatistic:output_type -> server.CodedReply
	1,  // 25: server.Greeter.InformationDeviceSummary:output_type -> server.ConfigurationsDeviceRequest
	2,  // 26: server.Greeter.InformationPlatformSummary:output_type -> server.CodedReply
	2,  // 27: server.Greeter.ConfigurationsDeviceAddition:output_type -> server.CodedReply
	2,  // 28: server.Greeter.ConfigurationsDeviceEditing:output_type -> server.CodedReply
	2,  // 29: server.Greeter.ConfigurationsDeviceDeletion:output_type -> server.CodedReply
	2,  // 30: server.Greeter.ConfigurationsDeviceReconnection:output_type -> server.CodedReply
	18, // [18:31] is the sub-list for method output_type
	5,  // [5:18] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_server_server_proto_init() }
func file_server_server_proto_init() {
	if File_server_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_server_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationsDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodedReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapBoolReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceUniqID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceUniqIDAbdChannelUniqID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevicesSummaryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_server_server_proto_goTypes,
		DependencyIndexes: file_server_server_proto_depIdxs,
		MessageInfos:      file_server_server_proto_msgTypes,
	}.Build()
	File_server_server_proto = out.File
	file_server_server_proto_rawDesc = nil
	file_server_server_proto_goTypes = nil
	file_server_server_proto_depIdxs = nil
}
