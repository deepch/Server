// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/server.proto

package server_proto

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DeviceChannel struct {
	Name        string  `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	DataURL     string  `protobuf:"bytes,2,opt,name=DataURL,proto3" json:"DataURL,omitempty"`
	SnapshotURL string  `protobuf:"bytes,3,opt,name=SnapshotURL,proto3" json:"SnapshotURL,omitempty"`
	VOD         bool    `protobuf:"varint,4,opt,name=VOD,proto3" json:"VOD,omitempty"`
	Record      bool    `protobuf:"varint,5,opt,name=Record,proto3" json:"Record,omitempty"`
	RecordTime  uint32  `protobuf:"varint,6,opt,name=RecordTime,proto3" json:"RecordTime,omitempty"`
	Audio       bool    `protobuf:"varint,7,opt,name=Audio,proto3" json:"Audio,omitempty"`
	RTPProxy    bool    `protobuf:"varint,8,opt,name=RTPProxy,proto3" json:"RTPProxy,omitempty"`
	Debug       bool    `protobuf:"varint,9,opt,name=Debug,proto3" json:"Debug,omitempty"`
	DebugRaw    bool    `protobuf:"varint,10,opt,name=DebugRaw,proto3" json:"DebugRaw,omitempty"`
	Status      uint32  `protobuf:"varint,11,opt,name=Status,proto3" json:"Status,omitempty"`
	Bitrate     float32 `protobuf:"fixed32,12,opt,name=Bitrate,proto3" json:"Bitrate,omitempty"`
}

func (m *DeviceChannel) Reset()         { *m = DeviceChannel{} }
func (m *DeviceChannel) String() string { return proto.CompactTextString(m) }
func (*DeviceChannel) ProtoMessage()    {}
func (*DeviceChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde5b5d7aefe7c04, []int{0}
}
func (m *DeviceChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceChannel.Merge(m, src)
}
func (m *DeviceChannel) XXX_Size() int {
	return m.Size()
}
func (m *DeviceChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceChannel.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceChannel proto.InternalMessageInfo

func (m *DeviceChannel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeviceChannel) GetDataURL() string {
	if m != nil {
		return m.DataURL
	}
	return ""
}

func (m *DeviceChannel) GetSnapshotURL() string {
	if m != nil {
		return m.SnapshotURL
	}
	return ""
}

func (m *DeviceChannel) GetVOD() bool {
	if m != nil {
		return m.VOD
	}
	return false
}

func (m *DeviceChannel) GetRecord() bool {
	if m != nil {
		return m.Record
	}
	return false
}

func (m *DeviceChannel) GetRecordTime() uint32 {
	if m != nil {
		return m.RecordTime
	}
	return 0
}

func (m *DeviceChannel) GetAudio() bool {
	if m != nil {
		return m.Audio
	}
	return false
}

func (m *DeviceChannel) GetRTPProxy() bool {
	if m != nil {
		return m.RTPProxy
	}
	return false
}

func (m *DeviceChannel) GetDebug() bool {
	if m != nil {
		return m.Debug
	}
	return false
}

func (m *DeviceChannel) GetDebugRaw() bool {
	if m != nil {
		return m.DebugRaw
	}
	return false
}

func (m *DeviceChannel) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *DeviceChannel) GetBitrate() float32 {
	if m != nil {
		return m.Bitrate
	}
	return 0
}

type ConfigurationsDeviceRequest struct {
	DeviceUniqID string                    `protobuf:"bytes,1,opt,name=DeviceUniqID,proto3" json:"DeviceUniqID,omitempty"`
	ChannelsMode string                    `protobuf:"bytes,2,opt,name=ChannelsMode,proto3" json:"ChannelsMode,omitempty"`
	Name         string                    `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	OnvifURL     string                    `protobuf:"bytes,4,opt,name=OnvifURL,proto3" json:"OnvifURL,omitempty"`
	Channels     map[string]*DeviceChannel `protobuf:"bytes,5,rep,name=Channels,proto3" json:"Channels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ConfigurationsDeviceRequest) Reset()         { *m = ConfigurationsDeviceRequest{} }
func (m *ConfigurationsDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*ConfigurationsDeviceRequest) ProtoMessage()    {}
func (*ConfigurationsDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde5b5d7aefe7c04, []int{1}
}
func (m *ConfigurationsDeviceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigurationsDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigurationsDeviceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigurationsDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigurationsDeviceRequest.Merge(m, src)
}
func (m *ConfigurationsDeviceRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConfigurationsDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigurationsDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigurationsDeviceRequest proto.InternalMessageInfo

func (m *ConfigurationsDeviceRequest) GetDeviceUniqID() string {
	if m != nil {
		return m.DeviceUniqID
	}
	return ""
}

func (m *ConfigurationsDeviceRequest) GetChannelsMode() string {
	if m != nil {
		return m.ChannelsMode
	}
	return ""
}

func (m *ConfigurationsDeviceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConfigurationsDeviceRequest) GetOnvifURL() string {
	if m != nil {
		return m.OnvifURL
	}
	return ""
}

func (m *ConfigurationsDeviceRequest) GetChannels() map[string]*DeviceChannel {
	if m != nil {
		return m.Channels
	}
	return nil
}

type CodedReply struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *CodedReply) Reset()         { *m = CodedReply{} }
func (m *CodedReply) String() string { return proto.CompactTextString(m) }
func (*CodedReply) ProtoMessage()    {}
func (*CodedReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde5b5d7aefe7c04, []int{2}
}
func (m *CodedReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CodedReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CodedReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CodedReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodedReply.Merge(m, src)
}
func (m *CodedReply) XXX_Size() int {
	return m.Size()
}
func (m *CodedReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CodedReply.DiscardUnknown(m)
}

var xxx_messageInfo_CodedReply proto.InternalMessageInfo

func (m *CodedReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type BoolReply struct {
	Channel bool `protobuf:"varint,1,opt,name=Channel,proto3" json:"Channel,omitempty"`
}

func (m *BoolReply) Reset()         { *m = BoolReply{} }
func (m *BoolReply) String() string { return proto.CompactTextString(m) }
func (*BoolReply) ProtoMessage()    {}
func (*BoolReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde5b5d7aefe7c04, []int{3}
}
func (m *BoolReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BoolReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BoolReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BoolReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoolReply.Merge(m, src)
}
func (m *BoolReply) XXX_Size() int {
	return m.Size()
}
func (m *BoolReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BoolReply.DiscardUnknown(m)
}

var xxx_messageInfo_BoolReply proto.InternalMessageInfo

func (m *BoolReply) GetChannel() bool {
	if m != nil {
		return m.Channel
	}
	return false
}

type MapBoolReply struct {
	Channels map[string]uint32 `protobuf:"bytes,1,rep,name=Channels,proto3" json:"Channels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *MapBoolReply) Reset()         { *m = MapBoolReply{} }
func (m *MapBoolReply) String() string { return proto.CompactTextString(m) }
func (*MapBoolReply) ProtoMessage()    {}
func (*MapBoolReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde5b5d7aefe7c04, []int{4}
}
func (m *MapBoolReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapBoolReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapBoolReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapBoolReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapBoolReply.Merge(m, src)
}
func (m *MapBoolReply) XXX_Size() int {
	return m.Size()
}
func (m *MapBoolReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MapBoolReply.DiscardUnknown(m)
}

var xxx_messageInfo_MapBoolReply proto.InternalMessageInfo

func (m *MapBoolReply) GetChannels() map[string]uint32 {
	if m != nil {
		return m.Channels
	}
	return nil
}

type DeviceUniqID struct {
	DeviceUniqID string `protobuf:"bytes,1,opt,name=DeviceUniqID,proto3" json:"DeviceUniqID,omitempty"`
}

func (m *DeviceUniqID) Reset()         { *m = DeviceUniqID{} }
func (m *DeviceUniqID) String() string { return proto.CompactTextString(m) }
func (*DeviceUniqID) ProtoMessage()    {}
func (*DeviceUniqID) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde5b5d7aefe7c04, []int{5}
}
func (m *DeviceUniqID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceUniqID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceUniqID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceUniqID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceUniqID.Merge(m, src)
}
func (m *DeviceUniqID) XXX_Size() int {
	return m.Size()
}
func (m *DeviceUniqID) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceUniqID.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceUniqID proto.InternalMessageInfo

func (m *DeviceUniqID) GetDeviceUniqID() string {
	if m != nil {
		return m.DeviceUniqID
	}
	return ""
}

type DeviceUniqIDAbdChannelUniqID struct {
	DeviceUniqID  string `protobuf:"bytes,1,opt,name=DeviceUniqID,proto3" json:"DeviceUniqID,omitempty"`
	ChannelUniqID string `protobuf:"bytes,2,opt,name=ChannelUniqID,proto3" json:"ChannelUniqID,omitempty"`
}

func (m *DeviceUniqIDAbdChannelUniqID) Reset()         { *m = DeviceUniqIDAbdChannelUniqID{} }
func (m *DeviceUniqIDAbdChannelUniqID) String() string { return proto.CompactTextString(m) }
func (*DeviceUniqIDAbdChannelUniqID) ProtoMessage()    {}
func (*DeviceUniqIDAbdChannelUniqID) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde5b5d7aefe7c04, []int{6}
}
func (m *DeviceUniqIDAbdChannelUniqID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceUniqIDAbdChannelUniqID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceUniqIDAbdChannelUniqID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceUniqIDAbdChannelUniqID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceUniqIDAbdChannelUniqID.Merge(m, src)
}
func (m *DeviceUniqIDAbdChannelUniqID) XXX_Size() int {
	return m.Size()
}
func (m *DeviceUniqIDAbdChannelUniqID) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceUniqIDAbdChannelUniqID.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceUniqIDAbdChannelUniqID proto.InternalMessageInfo

func (m *DeviceUniqIDAbdChannelUniqID) GetDeviceUniqID() string {
	if m != nil {
		return m.DeviceUniqID
	}
	return ""
}

func (m *DeviceUniqIDAbdChannelUniqID) GetChannelUniqID() string {
	if m != nil {
		return m.ChannelUniqID
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde5b5d7aefe7c04, []int{7}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type DevicesSummaryReply struct {
	Encoders map[string]*ConfigurationsDeviceRequest `protobuf:"bytes,1,rep,name=Encoders,proto3" json:"Encoders,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *DevicesSummaryReply) Reset()         { *m = DevicesSummaryReply{} }
func (m *DevicesSummaryReply) String() string { return proto.CompactTextString(m) }
func (*DevicesSummaryReply) ProtoMessage()    {}
func (*DevicesSummaryReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde5b5d7aefe7c04, []int{8}
}
func (m *DevicesSummaryReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DevicesSummaryReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DevicesSummaryReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DevicesSummaryReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevicesSummaryReply.Merge(m, src)
}
func (m *DevicesSummaryReply) XXX_Size() int {
	return m.Size()
}
func (m *DevicesSummaryReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DevicesSummaryReply.DiscardUnknown(m)
}

var xxx_messageInfo_DevicesSummaryReply proto.InternalMessageInfo

func (m *DevicesSummaryReply) GetEncoders() map[string]*ConfigurationsDeviceRequest {
	if m != nil {
		return m.Encoders
	}
	return nil
}

func init() {
	proto.RegisterType((*DeviceChannel)(nil), "server.DeviceChannel")
	proto.RegisterType((*ConfigurationsDeviceRequest)(nil), "server.ConfigurationsDeviceRequest")
	proto.RegisterMapType((map[string]*DeviceChannel)(nil), "server.ConfigurationsDeviceRequest.ChannelsEntry")
	proto.RegisterType((*CodedReply)(nil), "server.CodedReply")
	proto.RegisterType((*BoolReply)(nil), "server.BoolReply")
	proto.RegisterType((*MapBoolReply)(nil), "server.MapBoolReply")
	proto.RegisterMapType((map[string]uint32)(nil), "server.MapBoolReply.ChannelsEntry")
	proto.RegisterType((*DeviceUniqID)(nil), "server.DeviceUniqID")
	proto.RegisterType((*DeviceUniqIDAbdChannelUniqID)(nil), "server.DeviceUniqIDAbdChannelUniqID")
	proto.RegisterType((*Empty)(nil), "server.Empty")
	proto.RegisterType((*DevicesSummaryReply)(nil), "server.DevicesSummaryReply")
	proto.RegisterMapType((map[string]*ConfigurationsDeviceRequest)(nil), "server.DevicesSummaryReply.EncodersEntry")
}

func init() { proto.RegisterFile("server/server.proto", fileDescriptor_fde5b5d7aefe7c04) }

var fileDescriptor_fde5b5d7aefe7c04 = []byte{
	// 2757 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x59, 0x4f, 0x70, 0x1b, 0xd5,
	0x19, 0xcf, 0x5b, 0xc7, 0xff, 0x5e, 0x62, 0x4a, 0x17, 0x98, 0xaa, 0x4e, 0xc6, 0xf3, 0xba, 0x0d,
	0x10, 0x84, 0xbd, 0x92, 0x36, 0x8e, 0x13, 0x4c, 0x0a, 0x59, 0xc7, 0x1e, 0x26, 0x26, 0x09, 0xae,
	0x12, 0x32, 0x1d, 0xe8, 0xbf, 0xb5, 0xb4, 0xb6, 0x17, 0xe4, 0x5d, 0xb1, 0x5a, 0x99, 0x98, 0xc0,
	0x60, 0xcb, 0x49, 0x43, 0x6b, 0x86, 0x84, 0x6d, 0x4b, 0x69, 0xa7, 0x25, 0x2d, 0xf4, 0xd2, 0x19,
	0x66, 0xaa, 0x08, 0x2b, 0x91, 0xa5, 0xd8, 0xe9, 0xa5, 0x9d, 0x72, 0xe8, 0xf4, 0xbd, 0x74, 0x3a,
	0xd3, 0x23, 0x43, 0x38, 0x76, 0xb8, 0xf4, 0xd2, 0x4b, 0x4b, 0xe7, 0xbd, 0xb7, 0x2b, 0x69, 0x6d,
	0xd9, 0xb1, 0x83, 0xdb, 0x4b, 0x2f, 0xd6, 0x6a, 0xf7, 0xdb, 0xef, 0xfb, 0x7d, 0xbf, 0xef, 0xef,
	0xb3, 0xe0, 0x3d, 0x19, 0xdd, 0x9e, 0xd2, 0xed, 0x08, 0xff, 0x90, 0xd3, 0xb6, 0xe5, 0x58, 0x62,
	0x0b, 0xff, 0xd6, 0xb9, 0x7b, 0xdc, 0xb2, 0xc6, 0x53, 0x7a, 0x44, 0x4b, 0x1b, 0x11, 0xcd, 0x34,
	0x2d, 0x47, 0x73, 0x0c, 0xcb, 0xcc, 0x70, 0xa9, 0x4e, 0xfe, 0x91, 0xe8, 0x19, 0xd7, 0xcd, 0x1e,
	0x2b, 0xad, 0x9b, 0x5a, 0xda, 0x98, 0x52, 0x22, 0x56, 0x9a, 0xc9, 0xac, 0x96, 0x97, 0x72, 0xf7,
	0xc1, 0x8e, 0x41, 0x7d, 0xca, 0x48, 0xe8, 0x47, 0x26, 0x34, 0xd3, 0xd4, 0x53, 0xe2, 0x9b, 0x00,
	0x6e, 0x3f, 0xa1, 0x4d, 0xea, 0x21, 0x80, 0xc0, 0xde, 0xf6, 0x81, 0x57, 0x5c, 0xf5, 0xa5, 0xf0,
	0x3d, 0xf8, 0x6d, 0x7c, 0x9d, 0x5c, 0x44, 0xb8, 0x8c, 0xf3, 0x78, 0x09, 0xe7, 0x71, 0x05, 0xe7,
	0x95, 0x27, 0xbc, 0x9b, 0x64, 0x8e, 0xcc, 0x92, 0x1c, 0x99, 0xc1, 0xcb, 0x78, 0x91, 0x5e, 0xe1,
	0x02, 0xce, 0x23, 0xbc, 0x8c, 0xaf, 0x90, 0x79, 0x72, 0x01, 0x2f, 0xe1, 0x65, 0x5c, 0x44, 0x24,
	0x87, 0x8b, 0xb8, 0xcc, 0x9e, 0x2e, 0xe3, 0x02, 0xbb, 0x85, 0x6f, 0xe0, 0x65, 0x5c, 0xc1, 0x45,
	0x79, 0x18, 0x4a, 0x09, 0x6e, 0x3b, 0x2a, 0xdd, 0x04, 0xdb, 0xb3, 0x59, 0x23, 0x79, 0x13, 0xb4,
	0x64, 0x1c, 0xdb, 0x30, 0xc7, 0xe3, 0x0c, 0x8a, 0xf8, 0x19, 0x80, 0xad, 0x83, 0x9a, 0xa3, 0x3d,
	0x1d, 0x3f, 0x16, 0x12, 0x18, 0xac, 0x4f, 0x80, 0xab, 0x7e, 0x04, 0xc2, 0x23, 0xf8, 0x32, 0x99,
	0x23, 0x39, 0xf2, 0x3a, 0xc2, 0x0b, 0x78, 0x19, 0xe1, 0x12, 0x37, 0xc1, 0xec, 0x96, 0x28, 0x5a,
	0x84, 0x0b, 0xb8, 0x84, 0x17, 0x70, 0x11, 0x2f, 0xa3, 0x08, 0xc2, 0x79, 0x32, 0x87, 0x17, 0x70,
	0x89, 0x4a, 0x53, 0x47, 0x96, 0xc8, 0x3c, 0x39, 0xcf, 0x90, 0x30, 0x60, 0x65, 0x9c, 0x57, 0x4e,
	0xe3, 0xf7, 0x98, 0x97, 0xd7, 0xc8, 0x3c, 0x75, 0x04, 0x17, 0x49, 0x8e, 0xcc, 0x52, 0xd7, 0x0b,
	0x55, 0x55, 0x28, 0x6b, 0xa7, 0x10, 0x99, 0x25, 0xb3, 0x64, 0x1e, 0x57, 0x70, 0x99, 0xaa, 0xa3,
	0x9c, 0xdc, 0x20, 0x33, 0xb8, 0x84, 0xaf, 0xe3, 0x22, 0x99, 0x41, 0xb6, 0x93, 0x49, 0x23, 0x5c,
	0xc2, 0x15, 0x5c, 0x42, 0x13, 0x8e, 0x93, 0x96, 0x87, 0xef, 0x97, 0xe8, 0xbd, 0xfe, 0x48, 0x44,
	0x4b, 0x4e, 0x1a, 0x66, 0x3f, 0xfb, 0x7b, 0x38, 0xa6, 0x1c, 0x90, 0xa3, 0x72, 0x54, 0x8e, 0x45,
	0xa6, 0x8c, 0xa4, 0x6e, 0xc5, 0xa4, 0xaa, 0xe3, 0x37, 0x41, 0x53, 0xd6, 0x4e, 0xc5, 0x7d, 0xaf,
	0xc5, 0x7f, 0x02, 0xb8, 0xe3, 0xa4, 0xa9, 0xa5, 0x33, 0x13, 0x96, 0x43, 0x59, 0x68, 0x62, 0x2c,
	0xfc, 0x15, 0xb8, 0x2a, 0x01, 0xe1, 0xc7, 0x6e, 0xcf, 0x42, 0x19, 0xe7, 0xc9, 0x0c, 0xc9, 0xe1,
	0x12, 0x0b, 0x48, 0xf9, 0x7f, 0xe3, 0xf3, 0x5e, 0x89, 0x7e, 0xae, 0xe9, 0xb3, 0xa3, 0x67, 0x1c,
	0xf9, 0xb9, 0xb4, 0x3e, 0xbe, 0xca, 0xed, 0x7a, 0x57, 0xc5, 0x05, 0x01, 0x36, 0x9d, 0x7e, 0x6a,
	0x30, 0xb4, 0x1d, 0x81, 0xbd, 0x6d, 0x03, 0xbf, 0x12, 0x5c, 0xf5, 0x17, 0x42, 0x78, 0x04, 0xbb,
	0xb8, 0x8c, 0x2b, 0xe4, 0x0d, 0x72, 0x01, 0x17, 0x99, 0x9b, 0x45, 0x1a, 0xdf, 0x77, 0x48, 0x6e,
	0xd5, 0x6d, 0x32, 0x83, 0x8b, 0xf8, 0x2a, 0x83, 0x99, 0x67, 0x7e, 0x23, 0x96, 0xad, 0x45, 0x7c,
	0x85, 0xe5, 0x22, 0xcd, 0x83, 0x12, 0x79, 0x43, 0x59, 0x04, 0x75, 0x2a, 0x19, 0x07, 0x2b, 0x15,
	0xf2, 0x9b, 0x35, 0x75, 0x6b, 0x2b, 0xeb, 0xa6, 0x09, 0x9f, 0xc7, 0x65, 0x5a, 0x12, 0x75, 0x54,
	0x23, 0x9c, 0xc7, 0x05, 0x76, 0x79, 0x1d, 0xe7, 0x69, 0x30, 0x28, 0x4a, 0x32, 0x4b, 0xe9, 0xa4,
	0x72, 0x05, 0x32, 0x1f, 0xb4, 0xc5, 0x83, 0x40, 0xb5, 0x7c, 0x40, 0x13, 0x96, 0x52, 0x4e, 0x11,
	0xe0, 0x6b, 0x94, 0x75, 0x56, 0x52, 0x15, 0x5c, 0xc4, 0x8b, 0xf2, 0x70, 0x8b, 0xe4, 0xd8, 0x59,
	0x9d, 0x56, 0xcf, 0xa8, 0x65, 0xa5, 0xe2, 0x94, 0x2e, 0xf1, 0x4f, 0x00, 0xb6, 0xc4, 0xf5, 0x84,
	0x65, 0x27, 0x43, 0xcd, 0x8c, 0xb9, 0x05, 0xe0, 0xaa, 0x79, 0xb0, 0x19, 0xe6, 0xf0, 0x35, 0x1a,
	0x62, 0x9a, 0x4e, 0x34, 0xde, 0x34, 0x81, 0xce, 0xe3, 0x12, 0x2f, 0xef, 0xfa, 0xf4, 0x39, 0xbe,
	0x31, 0xe2, 0x6a, 0xda, 0x68, 0xa2, 0xae, 0xa5, 0x6d, 0x95, 0x33, 0x9e, 0x13, 0xe2, 0x2c, 0x80,
	0x90, 0x5f, 0x9e, 0x32, 0x26, 0xf5, 0x50, 0x0b, 0x02, 0x7b, 0x3b, 0x06, 0x34, 0x57, 0xfd, 0x76,
	0xf8, 0x7e, 0xec, 0xb2, 0x10, 0xb0, 0x0e, 0x15, 0x80, 0x5c, 0x40, 0xd4, 0x3a, 0x99, 0xc5, 0x79,
	0x72, 0x5e, 0x79, 0x60, 0x43, 0x62, 0xf2, 0xf0, 0x76, 0x49, 0xe9, 0xa5, 0x19, 0x99, 0x35, 0x4c,
	0x67, 0x9f, 0x12, 0xaf, 0x33, 0x2a, 0x12, 0x00, 0x9b, 0xd5, 0x6c, 0xd2, 0xb0, 0x42, 0xad, 0x8c,
	0xd2, 0x32, 0x70, 0xd5, 0xab, 0x20, 0x7c, 0x7a, 0x53, 0x94, 0x16, 0xc8, 0x1c, 0x8b, 0x69, 0x81,
	0x67, 0xc7, 0x02, 0x5e, 0x66, 0xbd, 0xf3, 0x2a, 0xaf, 0xaa, 0x3b, 0x23, 0x36, 0xa8, 0xd3, 0x4b,
	0xc9, 0xf2, 0xfa, 0xc4, 0x72, 0x4f, 0xc4, 0x9b, 0x00, 0xb6, 0xc5, 0x4f, 0x8d, 0x8c, 0xd8, 0xd6,
	0x99, 0xe9, 0x50, 0x1b, 0x73, 0xab, 0x08, 0x5c, 0xf5, 0x0a, 0x08, 0x0f, 0x6f, 0xdc, 0x2d, 0x5e,
	0xfb, 0x37, 0x98, 0x23, 0x65, 0x46, 0x2a, 0x99, 0xa5, 0x4d, 0x01, 0x17, 0xd8, 0xdf, 0xbc, 0x72,
	0x6a, 0x83, 0xae, 0xac, 0xa5, 0x82, 0xf2, 0x54, 0xa1, 0x81, 0x5b, 0xcf, 0xa3, 0xaa, 0x1f, 0xe2,
	0xbb, 0x02, 0x6c, 0x1e, 0xd4, 0x47, 0xb3, 0xe3, 0xa1, 0x76, 0xe6, 0xd1, 0xbc, 0xe0, 0xaa, 0x17,
	0x84, 0x70, 0xf6, 0x4e, 0x73, 0x9f, 0xda, 0xac, 0xe0, 0x3c, 0x5e, 0x58, 0x15, 0x24, 0x96, 0x3d,
	0xb3, 0x5e, 0xcb, 0x2d, 0xe2, 0xeb, 0x74, 0xa6, 0xd0, 0xb0, 0x5e, 0x25, 0x73, 0x64, 0x86, 0xcf,
	0x4a, 0xe5, 0xd5, 0x3b, 0x29, 0x10, 0x3a, 0x1e, 0x17, 0x18, 0x1b, 0x57, 0x58, 0xcf, 0xfe, 0x80,
	0x76, 0xf6, 0x0a, 0xbb, 0x28, 0xb1, 0xdb, 0x7e, 0xb7, 0xb9, 0x48, 0xed, 0x2f, 0xb3, 0x81, 0xfb,
	0x7d, 0x0f, 0xfe, 0xe2, 0x6d, 0x22, 0xcf, 0xa8, 0x11, 0xdf, 0x11, 0x60, 0x1b, 0xbb, 0x8a, 0x6b,
	0x2f, 0x86, 0x20, 0xe3, 0x69, 0x56, 0x70, 0xd5, 0x7f, 0x81, 0xf0, 0xd9, 0x2d, 0xe2, 0xa9, 0x36,
	0x7b, 0xd7, 0x1c, 0xb8, 0x94, 0x3f, 0x59, 0xe9, 0xeb, 0x45, 0xe4, 0x1c, 0xce, 0xe3, 0x45, 0x5c,
	0x51, 0xac, 0x3b, 0x61, 0xab, 0x66, 0x78, 0xd9, 0x5b, 0x3a, 0x18, 0x5f, 0x2b, 0x03, 0x75, 0x8e,
	0x15, 0x1b, 0xef, 0xbe, 0x45, 0x24, 0x4f, 0x28, 0x7d, 0xbd, 0xab, 0xb3, 0xc8, 0xe7, 0x44, 0xfc,
	0x10, 0xc0, 0x96, 0x93, 0x8e, 0xe6, 0x64, 0x33, 0xa1, 0x1d, 0xac, 0xdd, 0xe4, 0x81, 0xab, 0xbe,
	0x4f, 0x5b, 0xe8, 0x25, 0x5c, 0x66, 0xc3, 0xb4, 0x40, 0x79, 0x68, 0x40, 0x8d, 0xbf, 0xf0, 0xcc,
	0xb1, 0x90, 0x14, 0x59, 0x84, 0xbc, 0xa1, 0x7c, 0xd1, 0x27, 0xae, 0xbe, 0xd2, 0x87, 0xf1, 0x65,
	0xda, 0xd3, 0x59, 0x37, 0xc0, 0x57, 0xe8, 0x98, 0x60, 0xad, 0x9d, 0x4a, 0xd6, 0x96, 0x95, 0xc0,
	0xda, 0xc4, 0x86, 0x41, 0x75, 0xf8, 0x90, 0x39, 0x7f, 0x5e, 0xc8, 0xc3, 0x4d, 0x52, 0xb4, 0xae,
	0x7d, 0x79, 0x0e, 0x88, 0x3f, 0x05, 0xb0, 0x75, 0xc0, 0x70, 0x6c, 0xcd, 0xd1, 0x43, 0x3b, 0x11,
	0xd8, 0x2b, 0x0c, 0xbc, 0xea, 0xaa, 0x2f, 0x87, 0x77, 0xe1, 0x37, 0xe9, 0x28, 0x61, 0x5a, 0x16,
	0x59, 0x01, 0xfe, 0x97, 0x50, 0xb5, 0x4b, 0xb1, 0xa8, 0xd2, 0x2b, 0x47, 0x29, 0xb6, 0xe6, 0xb1,
	0x94, 0xa5, 0x39, 0x71, 0x1f, 0x8f, 0xf4, 0x83, 0x1d, 0x70, 0xd7, 0x11, 0xcb, 0x1c, 0x33, 0xc6,
	0xb3, 0x36, 0xdf, 0x4e, 0xf9, 0x4a, 0x1a, 0xd7, 0x5f, 0xc8, 0xea, 0x19, 0x47, 0x7c, 0x5f, 0x80,
	0x3b, 0xf9, 0x9d, 0xa7, 0x4d, 0xe3, 0x85, 0xa3, 0x83, 0xde, 0x6a, 0x7a, 0x41, 0x70, 0xd5, 0x39,
	0x21, 0x3c, 0x88, 0xdf, 0xf3, 0xf7, 0x1c, 0x5c, 0x21, 0xaf, 0xfb, 0x05, 0xc8, 0x33, 0x6f, 0x89,
	0x8d, 0xd9, 0x73, 0xfc, 0x31, 0xe3, 0x7f, 0xa6, 0xe1, 0xc2, 0xaa, 0xe4, 0xc0, 0x56, 0xa8, 0xe9,
	0xe6, 0xeb, 0x41, 0x99, 0x8d, 0x78, 0xca, 0xd4, 0x42, 0x8d, 0x03, 0xb6, 0x97, 0x71, 0xa2, 0xc8,
	0xeb, 0xf8, 0x1a, 0xaf, 0x60, 0xb6, 0xb5, 0xd1, 0x95, 0x17, 0x4d, 0x29, 0xf2, 0xf0, 0x03, 0x52,
	0x4c, 0xd9, 0xa7, 0xf7, 0xee, 0xef, 0x3b, 0xd0, 0xa3, 0x1f, 0x7c, 0x64, 0xb4, 0x27, 0xa6, 0x24,
	0xf7, 0xf5, 0x68, 0xbd, 0xfb, 0xfb, 0x7a, 0x7a, 0x95, 0xbe, 0xbe, 0x58, 0x6f, 0xec, 0x40, 0x6f,
	0x34, 0xda, 0x60, 0x4b, 0x0e, 0xb0, 0x23, 0xfe, 0x46, 0x80, 0x3b, 0xbd, 0x6d, 0x3e, 0x73, 0xdc,
	0x4a, 0xea, 0xde, 0xca, 0x7c, 0x4e, 0x70, 0xd5, 0x19, 0x21, 0xbc, 0x07, 0xff, 0xb2, 0xba, 0xc0,
	0xd0, 0xd6, 0x4c, 0x37, 0x17, 0x92, 0x23, 0xf3, 0xc1, 0xe5, 0xfe, 0x77, 0x60, 0x23, 0x62, 0xdd,
	0x5e, 0xf7, 0xab, 0x90, 0x39, 0x56, 0x97, 0x25, 0xc4, 0xe6, 0x50, 0x9e, 0xd5, 0x26, 0xef, 0x4d,
	0x96, 0x39, 0x65, 0x8c, 0x21, 0x32, 0x87, 0x98, 0xb7, 0xaf, 0xe1, 0x12, 0xad, 0xff, 0x9a, 0x8a,
	0x65, 0xba, 0x63, 0xd2, 0x44, 0x59, 0xa0, 0x1b, 0xec, 0x6d, 0x16, 0x24, 0x5e, 0xf1, 0x34, 0xd1,
	0x96, 0xc8, 0x45, 0xca, 0x1c, 0xa3, 0xd5, 0x5b, 0x91, 0x11, 0x2e, 0xa1, 0xba, 0xb5, 0x91, 0x96,
	0x35, 0x9d, 0x4a, 0x94, 0x2c, 0xfa, 0x79, 0x13, 0x34, 0x33, 0x28, 0xf1, 0x00, 0x35, 0xe2, 0x25,
	0xff, 0xb4, 0xc3, 0x17, 0xea, 0x97, 0x5d, 0x75, 0x3a, 0xbc, 0xcb, 0x3f, 0xed, 0xbc, 0xd7, 0x20,
	0x4f, 0x1e, 0x6f, 0x70, 0x14, 0xda, 0xd4, 0x69, 0xa7, 0x5d, 0x4a, 0xb2, 0x60, 0xad, 0x79, 0xd8,
	0xb9, 0xdc, 0x04, 0xdb, 0x9e, 0xa2, 0x50, 0xe9, 0x9e, 0xbf, 0x9d, 0xc1, 0xca, 0x35, 0xb9, 0xea,
	0xbf, 0x85, 0xf0, 0x37, 0x83, 0x7b, 0xbe, 0x47, 0x6d, 0x6d, 0x29, 0xcf, 0x57, 0xa7, 0xe4, 0x02,
	0x6f, 0x37, 0x64, 0x0e, 0xdf, 0x60, 0xdb, 0x3f, 0x62, 0x3b, 0x7a, 0x8e, 0x4b, 0x78, 0x8d, 0xd8,
	0x5b, 0x60, 0xab, 0xd5, 0xfe, 0x29, 0xd8, 0x92, 0x63, 0x00, 0x5b, 0xfd, 0x11, 0xbe, 0x4c, 0x57,
	0xe3, 0x39, 0x7c, 0x9d, 0xa5, 0xfb, 0x05, 0x7f, 0x31, 0x5e, 0x51, 0x03, 0xf5, 0xc5, 0x41, 0xa1,
	0xcc, 0x90, 0x1c, 0x3a, 0x18, 0x65, 0x59, 0x45, 0x0d, 0xb1, 0xb7, 0xaf, 0x52, 0x52, 0xeb, 0xf2,
	0x8a, 0xfb, 0xef, 0x0d, 0x42, 0xbc, 0x84, 0xf8, 0x3c, 0xce, 0xb3, 0x30, 0x55, 0xe8, 0x23, 0x9a,
	0x91, 0x6c, 0xfd, 0x5e, 0xa2, 0xbe, 0xb2, 0x53, 0xcf, 0x32, 0xf5, 0xb5, 0xc0, 0x84, 0x4a, 0xf4,
	0x01, 0x0d, 0x90, 0x3c, 0xdc, 0xb5, 0xee, 0xf1, 0x64, 0xd5, 0xa1, 0xa4, 0x1a, 0x14, 0xf1, 0x7b,
	0x00, 0xb6, 0xf9, 0x59, 0x14, 0x6a, 0x46, 0x4d, 0x7b, 0x77, 0x28, 0x31, 0xd9, 0x3b, 0xac, 0xaf,
	0xd3, 0xc7, 0x64, 0xff, 0x9d, 0x21, 0xd3, 0xb1, 0xa7, 0x07, 0x0e, 0xb8, 0x6a, 0x6f, 0xf8, 0x41,
	0x6e, 0x02, 0x45, 0x51, 0x0c, 0x29, 0x68, 0x9f, 0x2c, 0xcb, 0x32, 0x0a, 0x9c, 0xc7, 0x51, 0xc6,
	0xb1, 0xb3, 0x09, 0x47, 0x69, 0xb7, 0xcc, 0xd4, 0x34, 0x72, 0xf4, 0x33, 0x4e, 0xbc, 0x6a, 0xbb,
	0x33, 0x0e, 0x3b, 0x02, 0x3a, 0xc5, 0xbb, 0x61, 0xd3, 0xf3, 0xfa, 0x34, 0xef, 0x8f, 0x71, 0x7a,
	0x29, 0x3e, 0x0c, 0x9b, 0xa7, 0xb4, 0x54, 0x96, 0x37, 0x81, 0x1d, 0xca, 0x7d, 0x3e, 0xce, 0x80,
	0x91, 0x38, 0x97, 0xe9, 0x17, 0x0e, 0x02, 0xe9, 0xd7, 0x00, 0xc2, 0x23, 0x56, 0x52, 0x4f, 0xc6,
	0xf5, 0x74, 0x6a, 0x5a, 0xfc, 0x31, 0x80, 0xad, 0x93, 0x7a, 0x26, 0xa3, 0x8d, 0xfb, 0xff, 0x11,
	0x38, 0xeb, 0xaa, 0x67, 0xc2, 0xbb, 0xf0, 0xbb, 0x6b, 0xe6, 0xb8, 0x72, 0x82, 0x8d, 0xc3, 0x02,
	0x1f, 0xd3, 0xab, 0xa6, 0xae, 0xe7, 0xf1, 0xc6, 0x6b, 0x66, 0xb8, 0x5d, 0xca, 0x64, 0x13, 0x09,
	0x3d, 0x93, 0x91, 0xe2, 0x3e, 0x16, 0x29, 0x07, 0x60, 0xfb, 0x00, 0x1d, 0xd7, 0x0c, 0x65, 0x16,
	0xb6, 0x7a, 0xae, 0x30, 0x90, 0x6d, 0x03, 0xcf, 0xba, 0xea, 0x37, 0xc2, 0x5d, 0xf8, 0x27, 0x34,
	0x3d, 0xeb, 0xb6, 0x15, 0x3a, 0xe0, 0x6b, 0x38, 0xe5, 0x75, 0x71, 0x32, 0x59, 0xba, 0x19, 0xa0,
	0x08, 0x1a, 0xd3, 0x52, 0x19, 0xdd, 0x5f, 0x14, 0xe2, 0xbe, 0x2d, 0xe9, 0x47, 0x02, 0xdc, 0x79,
	0x5c, 0x4b, 0xd7, 0x70, 0xfc, 0xa1, 0x3e, 0x33, 0x00, 0xcb, 0x0c, 0xc9, 0x67, 0xbc, 0x5e, 0x70,
	0x45, 0x2a, 0x9c, 0x07, 0xae, 0x3a, 0x0b, 0xc2, 0x3d, 0xf8, 0xe7, 0xf4, 0x18, 0x42, 0x57, 0x29,
	0x5a, 0x73, 0xd7, 0x56, 0x80, 0xe7, 0x13, 0xbd, 0x06, 0xff, 0xf1, 0x75, 0xe1, 0xb3, 0x0b, 0x5f,
	0x97, 0xf7, 0x2a, 0x2f, 0x0c, 0xda, 0x17, 0x68, 0x05, 0x0f, 0x7f, 0xe1, 0xac, 0x14, 0x95, 0xfa,
	0x51, 0xac, 0x5b, 0x8a, 0x49, 0xfd, 0x28, 0xfa, 0x4a, 0x5d, 0x66, 0x3d, 0x7a, 0xfb, 0xcc, 0xba,
	0xb7, 0x3e, 0xb3, 0x3a, 0xea, 0x53, 0xe8, 0x33, 0x10, 0x9c, 0xd7, 0xe2, 0xa7, 0xa0, 0xe1, 0x00,
	0xff, 0x10, 0xb8, 0xea, 0xef, 0xc1, 0x16, 0x0d, 0xf0, 0xa1, 0xad, 0xd0, 0xb2, 0x45, 0x23, 0x58,
	0xfa, 0x73, 0x13, 0xdc, 0x5d, 0x7f, 0x43, 0x1d, 0x4d, 0x7a, 0x74, 0xfe, 0x9f, 0x32, 0x22, 0x2e,
	0x81, 0x6a, 0x46, 0x79, 0x1e, 0xf3, 0xad, 0xe4, 0x2d, 0xe0, 0xaa, 0x2e, 0x08, 0x1f, 0xda, 0x2c,
	0xd6, 0xc0, 0xb6, 0xf2, 0xb5, 0xcf, 0xf3, 0x36, 0xdd, 0x98, 0x63, 0xab, 0xe1, 0x07, 0xd1, 0x4a,
	0xad, 0xb0, 0x79, 0x68, 0x32, 0xed, 0x4c, 0x4b, 0x7f, 0x07, 0xf0, 0x1e, 0xee, 0x59, 0xe6, 0x64,
	0x76, 0x72, 0x52, 0xb3, 0xa7, 0x79, 0xe9, 0x67, 0x60, 0xdb, 0x90, 0x99, 0xb0, 0x92, 0xba, 0xed,
	0x57, 0xfe, 0x43, 0xc1, 0x5e, 0x1b, 0x10, 0x97, 0x7d, 0x59, 0xde, 0x00, 0xba, 0x5d, 0xf5, 0xa1,
	0xea, 0x2c, 0xd0, 0x6c, 0x5b, 0x9b, 0xf6, 0xda, 0x24, 0x1b, 0x08, 0xbe, 0xac, 0x37, 0x0b, 0xe2,
	0x55, 0x43, 0x9d, 0xdf, 0x85, 0x1d, 0x01, 0x45, 0x0d, 0xca, 0xf4, 0x91, 0xe0, 0x00, 0xf8, 0xea,
	0x06, 0x06, 0x55, 0x5d, 0x2d, 0x2b, 0x85, 0xbb, 0x60, 0xeb, 0x13, 0xb6, 0xae, 0x3b, 0xba, 0x2d,
	0x4e, 0xc2, 0x2f, 0x1d, 0x35, 0xc7, 0x2c, 0x7b, 0x92, 0xbd, 0x33, 0x92, 0xd2, 0x1c, 0xfa, 0x65,
	0xc4, 0x30, 0xc7, 0xc5, 0x0e, 0x5f, 0x2d, 0x23, 0xa9, 0x53, 0xac, 0x59, 0xf1, 0x27, 0x89, 0x14,
	0x71, 0x55, 0x61, 0x74, 0x5b, 0xee, 0x2f, 0x9f, 0xfc, 0x50, 0xd8, 0x23, 0x4a, 0x91, 0x27, 0xe2,
	0x23, 0x47, 0x22, 0xa7, 0xfb, 0x22, 0x75, 0x1a, 0x23, 0xbe, 0xca, 0x08, 0xd3, 0x99, 0x81, 0x9d,
	0x0d, 0xcc, 0x9d, 0xd6, 0xed, 0x8c, 0x61, 0x99, 0x1b, 0xb1, 0xa8, 0xd4, 0x2c, 0x3e, 0x28, 0xde,
	0xbf, 0xbe, 0x45, 0x5f, 0x6d, 0x16, 0x7e, 0xb9, 0xee, 0x79, 0x30, 0x72, 0x2b, 0x6d, 0xee, 0x5a,
	0x27, 0xc0, 0x52, 0x37, 0xb3, 0xfb, 0x80, 0xb8, 0xa7, 0xa1, 0x5d, 0xef, 0x8d, 0x88, 0xaf, 0x79,
	0x06, 0x04, 0xb8, 0xe5, 0x8f, 0xbd, 0xa3, 0xdb, 0xbd, 0x41, 0x33, 0x3c, 0x21, 0x3b, 0xef, 0x6d,
	0x34, 0x57, 0xa4, 0x47, 0x98, 0xd5, 0x7d, 0x62, 0x6c, 0x1d, 0xab, 0x91, 0xb3, 0xf5, 0x8a, 0x5e,
	0x89, 0x78, 0x66, 0x7e, 0x0b, 0x60, 0xd7, 0x2a, 0x08, 0x5e, 0x11, 0x78, 0x22, 0x7b, 0x1a, 0x21,
	0x59, 0xd9, 0xdb, 0xd6, 0x40, 0xf6, 0x75, 0x86, 0xec, 0x49, 0xf1, 0xe8, 0x26, 0x90, 0x79, 0x7a,
	0x23, 0x67, 0x03, 0x06, 0xaa, 0x88, 0x8b, 0x00, 0x7e, 0x65, 0x3d, 0xc4, 0x46, 0xc6, 0x31, 0x12,
	0x9f, 0x0b, 0xf4, 0x29, 0x06, 0xfa, 0x84, 0x78, 0x6c, 0x8b, 0x40, 0x73, 0x44, 0xe7, 0x40, 0x20,
	0xb3, 0x6b, 0xc1, 0xe6, 0x8f, 0x1b, 0xc7, 0xbb, 0x51, 0x82, 0x1f, 0x62, 0xf0, 0xfa, 0xc4, 0xde,
	0x4d, 0x46, 0x9b, 0xdb, 0x79, 0x13, 0xc0, 0xd0, 0x6a, 0x18, 0x5e, 0x42, 0x36, 0x06, 0xb1, 0x91,
	0xee, 0x21, 0xf5, 0x33, 0x54, 0xbd, 0xa2, 0xb2, 0x19, 0x54, 0x9e, 0x59, 0xb3, 0x61, 0xcd, 0xaf,
	0x51, 0x7f, 0x8d, 0x28, 0xe9, 0xd9, 0x58, 0xb9, 0xfb, 0x1a, 0x7f, 0x06, 0xe0, 0xee, 0x46, 0xbe,
	0xa8, 0xc9, 0xa4, 0x41, 0xbf, 0x8a, 0x1b, 0xf1, 0xb8, 0x21, 0x10, 0x95, 0x01, 0x79, 0x54, 0xea,
	0xab, 0x02, 0x09, 0x6a, 0x58, 0x83, 0x08, 0xdf, 0x70, 0x3f, 0x08, 0x8b, 0x6f, 0x83, 0xc6, 0xff,
	0x17, 0x19, 0xa2, 0x22, 0xe6, 0xf8, 0x9d, 0x63, 0x3b, 0xcc, 0xb0, 0xf5, 0x77, 0xee, 0xdf, 0x1c,
	0x36, 0xcf, 0x2e, 0x85, 0xf6, 0xda, 0x1a, 0xbc, 0x0d, 0xea, 0x29, 0x9d, 0xf1, 0xb6, 0xf1, 0x24,
	0x7e, 0x8c, 0x81, 0x39, 0x18, 0xde, 0x24, 0x51, 0x55, 0x4b, 0x97, 0x00, 0x44, 0x8d, 0x09, 0x48,
	0x58, 0xa6, 0xa9, 0x27, 0x36, 0x09, 0x67, 0x80, 0xc1, 0x39, 0x24, 0xf6, 0x6f, 0x0e, 0x4e, 0xbd,
	0xb5, 0x81, 0x7f, 0x08, 0xae, 0xfa, 0x96, 0x20, 0xce, 0x03, 0x78, 0x1f, 0xfb, 0x61, 0x0f, 0x71,
	0x33, 0x28, 0x63, 0x8d, 0x39, 0x2f, 0x6a, 0xb6, 0x2e, 0x3d, 0x0c, 0x5b, 0x54, 0x33, 0x69, 0xeb,
	0xd3, 0xe2, 0x17, 0xe9, 0x19, 0x34, 0xd3, 0x1f, 0xf1, 0x7f, 0xec, 0xb5, 0xb3, 0x9d, 0x77, 0x19,
	0xe6, 0x98, 0x75, 0xb8, 0xfa, 0x3d, 0x7c, 0x18, 0xb6, 0x1e, 0x33, 0x12, 0xba, 0x99, 0xd1, 0xc5,
	0xfd, 0xbe, 0xf4, 0xb8, 0xe1, 0x4c, 0x64, 0x47, 0xe5, 0x84, 0x35, 0x19, 0x49, 0xea, 0x7a, 0x3a,
	0x31, 0x11, 0x39, 0xc9, 0x7f, 0x33, 0x1e, 0x4d, 0x59, 0xa3, 0x91, 0x49, 0xcd, 0x30, 0x23, 0xc7,
	0x8e, 0x1e, 0x19, 0x3a, 0x71, 0x72, 0x48, 0x9e, 0x4c, 0x2a, 0x4d, 0x31, 0x39, 0x1a, 0x6e, 0x02,
	0xc2, 0x76, 0xe5, 0x6e, 0x2d, 0x9d, 0x4e, 0x19, 0x09, 0x5e, 0x0d, 0xcf, 0x65, 0x2c, 0xf3, 0x99,
	0x6f, 0xc1, 0x67, 0x21, 0x54, 0xd3, 0xc6, 0x93, 0xfa, 0xb4, 0x9a, 0x75, 0x26, 0xc4, 0xe3, 0x6d,
	0x82, 0x78, 0x90, 0x5e, 0xe9, 0xa6, 0xe3, 0x09, 0x22, 0xc7, 0x7a, 0x5e, 0x37, 0xbb, 0x51, 0xda,
	0xd6, 0xc7, 0x8c, 0x33, 0x7a, 0x12, 0x8d, 0x4e, 0xa3, 0x01, 0x5d, 0xb3, 0x75, 0xbb, 0xdf, 0xfb,
	0x44, 0x87, 0x98, 0xc8, 0x63, 0x9d, 0x1d, 0xf4, 0x4d, 0xcb, 0x36, 0x5e, 0xe2, 0x2f, 0x0a, 0xa3,
	0x77, 0xc3, 0xbb, 0x02, 0xea, 0xb7, 0xfd, 0xf1, 0xe3, 0x2e, 0x80, 0x3f, 0xee, 0x02, 0x1f, 0x7d,
	0xdc, 0x05, 0x2e, 0xdd, 0xea, 0xda, 0x86, 0x6f, 0x75, 0x6d, 0xfb, 0xdb, 0xad, 0xae, 0x6d, 0x50,
	0x34, 0x2c, 0x79, 0xdc, 0x4e, 0x27, 0x64, 0x2d, 0x6d, 0x78, 0x71, 0x19, 0xd8, 0xc1, 0xbd, 0x1a,
	0xb1, 0x2d, 0xc7, 0x1a, 0x01, 0xcf, 0xec, 0x4e, 0x8f, 0x06, 0x7e, 0x14, 0x7f, 0x94, 0x7f, 0xf9,
	0x0e, 0xfb, 0x32, 0xda, 0xc2, 0x3e, 0xf6, 0xfd, 0x27, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x0d, 0x2f,
	0xa8, 0x3f, 0x1f, 0x00, 0x00,
}

func (m *DeviceChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Bitrate != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Bitrate))))
		i--
		dAtA[i] = 0x65
	}
	if m.Status != 0 {
		i = encodeVarintServer(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x58
	}
	if m.DebugRaw {
		i--
		if m.DebugRaw {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.Debug {
		i--
		if m.Debug {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.RTPProxy {
		i--
		if m.RTPProxy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Audio {
		i--
		if m.Audio {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.RecordTime != 0 {
		i = encodeVarintServer(dAtA, i, uint64(m.RecordTime))
		i--
		dAtA[i] = 0x30
	}
	if m.Record {
		i--
		if m.Record {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.VOD {
		i--
		if m.VOD {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.SnapshotURL) > 0 {
		i -= len(m.SnapshotURL)
		copy(dAtA[i:], m.SnapshotURL)
		i = encodeVarintServer(dAtA, i, uint64(len(m.SnapshotURL)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DataURL) > 0 {
		i -= len(m.DataURL)
		copy(dAtA[i:], m.DataURL)
		i = encodeVarintServer(dAtA, i, uint64(len(m.DataURL)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintServer(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigurationsDeviceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigurationsDeviceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigurationsDeviceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Channels) > 0 {
		for k := range m.Channels {
			v := m.Channels[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintServer(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintServer(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintServer(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.OnvifURL) > 0 {
		i -= len(m.OnvifURL)
		copy(dAtA[i:], m.OnvifURL)
		i = encodeVarintServer(dAtA, i, uint64(len(m.OnvifURL)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintServer(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChannelsMode) > 0 {
		i -= len(m.ChannelsMode)
		copy(dAtA[i:], m.ChannelsMode)
		i = encodeVarintServer(dAtA, i, uint64(len(m.ChannelsMode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeviceUniqID) > 0 {
		i -= len(m.DeviceUniqID)
		copy(dAtA[i:], m.DeviceUniqID)
		i = encodeVarintServer(dAtA, i, uint64(len(m.DeviceUniqID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CodedReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CodedReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CodedReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintServer(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BoolReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoolReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BoolReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Channel {
		i--
		if m.Channel {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapBoolReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapBoolReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapBoolReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Channels) > 0 {
		for k := range m.Channels {
			v := m.Channels[k]
			baseI := i
			i = encodeVarintServer(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintServer(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintServer(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeviceUniqID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceUniqID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceUniqID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeviceUniqID) > 0 {
		i -= len(m.DeviceUniqID)
		copy(dAtA[i:], m.DeviceUniqID)
		i = encodeVarintServer(dAtA, i, uint64(len(m.DeviceUniqID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceUniqIDAbdChannelUniqID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceUniqIDAbdChannelUniqID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceUniqIDAbdChannelUniqID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelUniqID) > 0 {
		i -= len(m.ChannelUniqID)
		copy(dAtA[i:], m.ChannelUniqID)
		i = encodeVarintServer(dAtA, i, uint64(len(m.ChannelUniqID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeviceUniqID) > 0 {
		i -= len(m.DeviceUniqID)
		copy(dAtA[i:], m.DeviceUniqID)
		i = encodeVarintServer(dAtA, i, uint64(len(m.DeviceUniqID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DevicesSummaryReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DevicesSummaryReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DevicesSummaryReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Encoders) > 0 {
		for k := range m.Encoders {
			v := m.Encoders[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintServer(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintServer(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintServer(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintServer(dAtA []byte, offset int, v uint64) int {
	offset -= sovServer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DeviceChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.DataURL)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.SnapshotURL)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	if m.VOD {
		n += 2
	}
	if m.Record {
		n += 2
	}
	if m.RecordTime != 0 {
		n += 1 + sovServer(uint64(m.RecordTime))
	}
	if m.Audio {
		n += 2
	}
	if m.RTPProxy {
		n += 2
	}
	if m.Debug {
		n += 2
	}
	if m.DebugRaw {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovServer(uint64(m.Status))
	}
	if m.Bitrate != 0 {
		n += 5
	}
	return n
}

func (m *ConfigurationsDeviceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceUniqID)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.ChannelsMode)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.OnvifURL)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	if len(m.Channels) > 0 {
		for k, v := range m.Channels {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovServer(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovServer(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovServer(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CodedReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	return n
}

func (m *BoolReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel {
		n += 2
	}
	return n
}

func (m *MapBoolReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Channels) > 0 {
		for k, v := range m.Channels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovServer(uint64(len(k))) + 1 + sovServer(uint64(v))
			n += mapEntrySize + 1 + sovServer(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DeviceUniqID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceUniqID)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	return n
}

func (m *DeviceUniqIDAbdChannelUniqID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceUniqID)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.ChannelUniqID)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	return n
}

func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DevicesSummaryReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Encoders) > 0 {
		for k, v := range m.Encoders {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovServer(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovServer(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovServer(uint64(mapEntrySize))
		}
	}
	return n
}

func sovServer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozServer(x uint64) (n int) {
	return sovServer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DeviceChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnapshotURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VOD", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VOD = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Record = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordTime", wireType)
			}
			m.RecordTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audio", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Audio = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RTPProxy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RTPProxy = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Debug = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugRaw", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DebugRaw = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bitrate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Bitrate = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigurationsDeviceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigurationsDeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigurationsDeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceUniqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceUniqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelsMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelsMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnvifURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnvifURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channels == nil {
				m.Channels = make(map[string]*DeviceChannel)
			}
			var mapkey string
			var mapvalue *DeviceChannel
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthServer
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthServer
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthServer
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthServer
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DeviceChannel{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipServer(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthServer
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Channels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CodedReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CodedReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CodedReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoolReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoolReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoolReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Channel = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapBoolReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapBoolReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapBoolReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channels == nil {
				m.Channels = make(map[string]uint32)
			}
			var mapkey string
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthServer
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthServer
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipServer(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthServer
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Channels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceUniqID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceUniqID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceUniqID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceUniqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceUniqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceUniqIDAbdChannelUniqID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceUniqIDAbdChannelUniqID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceUniqIDAbdChannelUniqID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceUniqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceUniqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelUniqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelUniqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DevicesSummaryReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevicesSummaryReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevicesSummaryReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encoders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Encoders == nil {
				m.Encoders = make(map[string]*ConfigurationsDeviceRequest)
			}
			var mapkey string
			var mapvalue *ConfigurationsDeviceRequest
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthServer
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthServer
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthServer
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthServer
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ConfigurationsDeviceRequest{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipServer(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthServer
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Encoders[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthServer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupServer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthServer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthServer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupServer = fmt.Errorf("proto: unexpected end of group")
)
